syntax = "proto3";

option go_package = "./;proto";
option java_package = "com.github.go2o.rpc";

message Empty {
}
message String {
    string value =  1;
}
message Int64 {
    sint64 value =  1;
}
message Int32 {
    sint32 value =  1;
}
message Bool {
    bool value =  1;
}
message StringMap {
    map<string, string> value =  1;
}
message StringArray {
    repeated string value =  1;
}
//传输结果对象
message Result {
    /* 状态码,如为0表示成功 */
    sint32 errCode = 1;
    /* 消息 */
    string errMsg = 2;
    /** 数据字典 */
    map<string, string> data = 3;
}

// 传输结果对象
message TxResult {
    /* 状态码,如为0表示成功 */
    sint32 code = 1;
    /* 消息 */
    string msg = 2;
    /** 操作返回业务编号 */
    int64 txId = 3;
    /** 操作返回其他数据 */
    map<string, string> data = 4;
}


// 键值对
message Pair {
    string key = 1;
    string value =  2;
}

message IdOrName {
    int64 id = 1;
    string name = 2;
}
message IdAndRemark {
    int64 id = 1;
    string remark = 2;
}

/** 设置依据 */
enum ESettingBasis {
    /** 未设置 */
    None = 0;
    /** 使用全局 */
    Global = 1;
    /** 自定义 */
    Custom = 2;
}

/** 价格计算方式 */
enum EPriceBasis {
    _Unused = 0;
    /** 原价 */
    Original = 1;
    /** 会员折扣价 */
    Discount = 2;
    /** 自定义价格 */
    CustomBasis = 3;
}

/** 金额/提成依据 */
enum EAmountBasis {
    _12 = 0;
    /** 未设置 */
    NotSet = 1;
    /** 按金额 */
    Amount = 2;
    /** 按百分比 */
    Percent = 3;
}

/** 分页参数 */
message SPagingParams {
    // 开始记录数
    sint64 begin = 1;
    // 结束记录数
    sint64 end = 2;
    // 条件
    string where = 3;
    // 排序字段
    string sortBy = 4;
    // 是否统计总数
    bool countTotal = 5;
    // 参数
    map<string, string> parameters = 6;
}

/** 分页结果 */
message SPagingResult {
    /** 代码 */
    sint32 errCode = 1;
    /** 消息 */
    string errMsg = 2;
    /** 总数 */
    sint32 count = 3;
    /** 数据 */
    string data = 4;
    /** 额外的数据 */
    map<string, string> extras = 5;
}

// 树形节点
message STreeNode {
    // 值
    int64 id =  1;
    // 文本
    string label = 2;
    // 图标,icon与JS树形控件冲突
    string icon = 3;
    // 是否展开
    bool expand = 4;
    // 延迟加载
    bool lazy = 5;
    // 其他数据
    map<string, string> data = 6;
    // 子节点
    repeated STreeNode children = 7;
    // 是否为叶子节点(下级无节点)
    bool isLeaf = 8;
}


message Id {
    int64 value =  1;
}
message MemberId {
    int64 value =  1;
}
message MerchantId {
    int64 value =  1;
}
message SellerId {
    int64 value =  1;
}
message BuyerId {
    int64 value =  1;
}

