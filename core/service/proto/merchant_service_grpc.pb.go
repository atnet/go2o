// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: merchant_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MerchantService_GetMerchant_FullMethodName                 = "/MerchantService/GetMerchant"
	MerchantService_GetMerchantIdByUsername_FullMethodName     = "/MerchantService/GetMerchantIdByUsername"
	MerchantService_CreateMerchant_FullMethodName              = "/MerchantService/CreateMerchant"
	MerchantService_SaveMerchant_FullMethodName                = "/MerchantService/SaveMerchant"
	MerchantService_SaveAuthenticate_FullMethodName            = "/MerchantService/SaveAuthenticate"
	MerchantService_ReviewAuthenticate_FullMethodName          = "/MerchantService/ReviewAuthenticate"
	MerchantService_CheckLogin_FullMethodName                  = "/MerchantService/CheckLogin"
	MerchantService_Stat_FullMethodName                        = "/MerchantService/Stat"
	MerchantService_SyncWholesaleItem_FullMethodName           = "/MerchantService/SyncWholesaleItem"
	MerchantService_GetAllTradeConf__FullMethodName            = "/MerchantService/GetAllTradeConf_"
	MerchantService_GetTradeConf_FullMethodName                = "/MerchantService/GetTradeConf"
	MerchantService_SaveTradeConf_FullMethodName               = "/MerchantService/SaveTradeConf"
	MerchantService_GetMerchantIdByMember_FullMethodName       = "/MerchantService/GetMerchantIdByMember"
	MerchantService_ChangeMemberBind_FullMethodName            = "/MerchantService/ChangeMemberBind"
	MerchantService_SetEnabled_FullMethodName                  = "/MerchantService/SetEnabled"
	MerchantService_GetMerchantIdByHost_FullMethodName         = "/MerchantService/GetMerchantIdByHost"
	MerchantService_GetMerchantMajorHost_FullMethodName        = "/MerchantService/GetMerchantMajorHost"
	MerchantService_SaveSaleConf_FullMethodName                = "/MerchantService/SaveSaleConf"
	MerchantService_GetSaleConf_FullMethodName                 = "/MerchantService/GetSaleConf"
	MerchantService_GetShopId_FullMethodName                   = "/MerchantService/GetShopId"
	MerchantService_ChangePassword_FullMethodName              = "/MerchantService/ChangePassword"
	MerchantService_GetApiInfo_FullMethodName                  = "/MerchantService/GetApiInfo"
	MerchantService_ToggleApiPerm_FullMethodName               = "/MerchantService/ToggleApiPerm"
	MerchantService_GetMerchantIdByApiId_FullMethodName        = "/MerchantService/GetMerchantIdByApiId"
	MerchantService_PagedNormalOrderOfVendor_FullMethodName    = "/MerchantService/PagedNormalOrderOfVendor"
	MerchantService_PagedWholesaleOrderOfVendor_FullMethodName = "/MerchantService/PagedWholesaleOrderOfVendor"
	MerchantService_PagedTradeOrderOfVendor_FullMethodName     = "/MerchantService/PagedTradeOrderOfVendor"
	MerchantService_WithdrawToMemberAccount_FullMethodName     = "/MerchantService/WithdrawToMemberAccount"
	MerchantService_GetMchBuyerGroup__FullMethodName           = "/MerchantService/GetMchBuyerGroup_"
	MerchantService_SaveMchBuyerGroup_FullMethodName           = "/MerchantService/SaveMchBuyerGroup"
	MerchantService_GetBuyerGroups_FullMethodName              = "/MerchantService/GetBuyerGroups"
	MerchantService_GetRebateRate_FullMethodName               = "/MerchantService/GetRebateRate"
	MerchantService_SaveGroupRebateRate_FullMethodName         = "/MerchantService/SaveGroupRebateRate"
	MerchantService_GetStaff_FullMethodName                    = "/MerchantService/GetStaff"
	MerchantService_GetStaffByMember_FullMethodName            = "/MerchantService/GetStaffByMember"
	MerchantService_SaveStaff_FullMethodName                   = "/MerchantService/SaveStaff"
	MerchantService_GetAccount_FullMethodName                  = "/MerchantService/GetAccount"
	MerchantService_CarryToAccount_FullMethodName              = "/MerchantService/CarryToAccount"
	MerchantService_AdjustAccount_FullMethodName               = "/MerchantService/AdjustAccount"
	MerchantService_Freeze_FullMethodName                      = "/MerchantService/Freeze"
	MerchantService_Unfreeze_FullMethodName                    = "/MerchantService/Unfreeze"
	MerchantService_RequestWithdrawal_FullMethodName           = "/MerchantService/RequestWithdrawal"
	MerchantService_ReviewWithdrawal_FullMethodName            = "/MerchantService/ReviewWithdrawal"
	MerchantService_FinishWithdrawal_FullMethodName            = "/MerchantService/FinishWithdrawal"
)

// MerchantServiceClient is the client API for MerchantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantServiceClient interface {
	// 获取商家的信息,mchId
	GetMerchant(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*QMerchant, error)
	// 根据电子邮箱获取商户编号,如果未注册,则返回0
	GetMerchantIdByUsername(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error)
	// 注册商户并开店
	CreateMerchant(ctx context.Context, in *CreateMerchantRequest, opts ...grpc.CallOption) (*MerchantCreateResponse, error)
	// 保存商户
	SaveMerchant(ctx context.Context, in *SaveMerchantRequest, opts ...grpc.CallOption) (*Result, error)
	// 保存商户认证信息
	SaveAuthenticate(ctx context.Context, in *SaveAuthenticateRequest, opts ...grpc.CallOption) (*Result, error)
	// 审核商户申请信息
	ReviewAuthenticate(ctx context.Context, in *MerchantReviewRequest, opts ...grpc.CallOption) (*Result, error)
	// 验证用户密码,并返回编号。可传入商户或会员的账号密码
	CheckLogin(ctx context.Context, in *MchUserPwdRequest, opts ...grpc.CallOption) (*MchLoginResponse, error)
	// 验证商户状态,mchId
	Stat(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	// 同步批发商品,mchId
	SyncWholesaleItem(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SyncWSItemsResponse, error)
	// 获取所有的交易设置,mchId
	GetAllTradeConf_(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*STradeConfListResponse, error)
	// 根据交易类型获取交易设置
	GetTradeConf(ctx context.Context, in *TradeConfRequest, opts ...grpc.CallOption) (*STradeConf_, error)
	// 保存交易设置
	SaveTradeConf(ctx context.Context, in *TradeConfSaveRequest, opts ...grpc.CallOption) (*Result, error)
	// 根据会员号获取商户编号
	GetMerchantIdByMember(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*Int64, error)
	// * 更换会员绑定
	ChangeMemberBind(ctx context.Context, in *ChangeMemberBindRequest, opts ...grpc.CallOption) (*Result, error)
	// 设置商户启用或停用
	SetEnabled(ctx context.Context, in *MerchantDisableRequest, opts ...grpc.CallOption) (*Result, error)
	// 根据主机查询商户编号
	GetMerchantIdByHost(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error)
	// 获取商户的域名
	GetMerchantMajorHost(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*String, error)
	SaveSaleConf(ctx context.Context, in *SaveMerchantSaleConfRequest, opts ...grpc.CallOption) (*Result, error)
	GetSaleConf(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantSaleConf, error)
	GetShopId(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*Int64, error)
	// 修改密码
	ChangePassword(ctx context.Context, in *ModifyMerchantPasswordRequest, opts ...grpc.CallOption) (*Result, error)
	// 保存API信息
	// rpc SaveApiInfo(mchId int64, d *merchant.ApiInfo) error
	// 获取API接口
	GetApiInfo(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantApiInfo, error)
	// 启用/停用接口权限
	ToggleApiPerm(ctx context.Context, in *MerchantApiPermRequest, opts ...grpc.CallOption) (*Result, error)
	// 根据API ID获取MerchantId
	GetMerchantIdByApiId(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error)
	// 查询分页订单
	PagedNormalOrderOfVendor(ctx context.Context, in *MerchantOrderRequest, opts ...grpc.CallOption) (*PagingMerchantOrderListResponse, error)
	// 查询分页订单
	PagedWholesaleOrderOfVendor(ctx context.Context, in *MerchantOrderRequest, opts ...grpc.CallOption) (*PagingMerchantOrderListResponse, error)
	// 查询分页订单
	PagedTradeOrderOfVendor(ctx context.Context, in *MerchantOrderRequest, opts ...grpc.CallOption) (*PagingMerchantOrderListResponse, error)
	// 提到会员账户
	WithdrawToMemberAccount(ctx context.Context, in *WithdrawToMemberAccountRequest, opts ...grpc.CallOption) (*Result, error)
	GetMchBuyerGroup_(ctx context.Context, in *MerchantBuyerGroupId, opts ...grpc.CallOption) (*SMerchantBuyerGroup, error)
	// 保存
	SaveMchBuyerGroup(ctx context.Context, in *SaveMerchantBuyerGroupRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取买家分组
	GetBuyerGroups(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*MerchantBuyerGroupListResponse, error)
	// 获取批发返点率
	GetRebateRate(ctx context.Context, in *MerchantBuyerGroupId, opts ...grpc.CallOption) (*WholesaleRebateRateListResponse, error)
	// 保存分组返点率
	SaveGroupRebateRate(ctx context.Context, in *SaveWholesaleRebateRateRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取商户员工
	GetStaff(ctx context.Context, in *StaffRequest, opts ...grpc.CallOption) (*SStaff, error)
	// 根据会员编号获取商户员工
	GetStaffByMember(ctx context.Context, in *StaffRequest, opts ...grpc.CallOption) (*SStaff, error)
	// 保存员工
	SaveStaff(ctx context.Context, in *SaveStaffRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取钱包账户
	GetAccount(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantAccount, error)
	// 账户入账
	CarryToAccount(ctx context.Context, in *UserWalletCarryRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 账户人工调整
	AdjustAccount(ctx context.Context, in *UserWalletAdjustRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 账户冻结
	Freeze(ctx context.Context, in *UserWalletFreezeRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 账户解冻
	Unfreeze(ctx context.Context, in *UserWalletUnfreezeRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 提现并返回提现编号,交易号以及错误信息
	RequestWithdrawal(ctx context.Context, in *UserWithdrawRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 确认提现
	ReviewWithdrawal(ctx context.Context, in *ReviewUserWithdrawalRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 收到款项,完成提现
	FinishWithdrawal(ctx context.Context, in *FinishUserWithdrawalRequest, opts ...grpc.CallOption) (*TxResult, error)
}

type merchantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantServiceClient(cc grpc.ClientConnInterface) MerchantServiceClient {
	return &merchantServiceClient{cc}
}

func (c *merchantServiceClient) GetMerchant(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*QMerchant, error) {
	out := new(QMerchant)
	err := c.cc.Invoke(ctx, MerchantService_GetMerchant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchantIdByUsername(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, MerchantService_GetMerchantIdByUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CreateMerchant(ctx context.Context, in *CreateMerchantRequest, opts ...grpc.CallOption) (*MerchantCreateResponse, error) {
	out := new(MerchantCreateResponse)
	err := c.cc.Invoke(ctx, MerchantService_CreateMerchant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveMerchant(ctx context.Context, in *SaveMerchantRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, MerchantService_SaveMerchant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveAuthenticate(ctx context.Context, in *SaveAuthenticateRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, MerchantService_SaveAuthenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ReviewAuthenticate(ctx context.Context, in *MerchantReviewRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, MerchantService_ReviewAuthenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CheckLogin(ctx context.Context, in *MchUserPwdRequest, opts ...grpc.CallOption) (*MchLoginResponse, error) {
	out := new(MchLoginResponse)
	err := c.cc.Invoke(ctx, MerchantService_CheckLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) Stat(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, MerchantService_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SyncWholesaleItem(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SyncWSItemsResponse, error) {
	out := new(SyncWSItemsResponse)
	err := c.cc.Invoke(ctx, MerchantService_SyncWholesaleItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAllTradeConf_(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*STradeConfListResponse, error) {
	out := new(STradeConfListResponse)
	err := c.cc.Invoke(ctx, MerchantService_GetAllTradeConf__FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetTradeConf(ctx context.Context, in *TradeConfRequest, opts ...grpc.CallOption) (*STradeConf_, error) {
	out := new(STradeConf_)
	err := c.cc.Invoke(ctx, MerchantService_GetTradeConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveTradeConf(ctx context.Context, in *TradeConfSaveRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, MerchantService_SaveTradeConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchantIdByMember(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, MerchantService_GetMerchantIdByMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ChangeMemberBind(ctx context.Context, in *ChangeMemberBindRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, MerchantService_ChangeMemberBind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SetEnabled(ctx context.Context, in *MerchantDisableRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, MerchantService_SetEnabled_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchantIdByHost(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, MerchantService_GetMerchantIdByHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchantMajorHost(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, MerchantService_GetMerchantMajorHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveSaleConf(ctx context.Context, in *SaveMerchantSaleConfRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, MerchantService_SaveSaleConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetSaleConf(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantSaleConf, error) {
	out := new(SMerchantSaleConf)
	err := c.cc.Invoke(ctx, MerchantService_GetSaleConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetShopId(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, MerchantService_GetShopId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ChangePassword(ctx context.Context, in *ModifyMerchantPasswordRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, MerchantService_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetApiInfo(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantApiInfo, error) {
	out := new(SMerchantApiInfo)
	err := c.cc.Invoke(ctx, MerchantService_GetApiInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ToggleApiPerm(ctx context.Context, in *MerchantApiPermRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, MerchantService_ToggleApiPerm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchantIdByApiId(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, MerchantService_GetMerchantIdByApiId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) PagedNormalOrderOfVendor(ctx context.Context, in *MerchantOrderRequest, opts ...grpc.CallOption) (*PagingMerchantOrderListResponse, error) {
	out := new(PagingMerchantOrderListResponse)
	err := c.cc.Invoke(ctx, MerchantService_PagedNormalOrderOfVendor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) PagedWholesaleOrderOfVendor(ctx context.Context, in *MerchantOrderRequest, opts ...grpc.CallOption) (*PagingMerchantOrderListResponse, error) {
	out := new(PagingMerchantOrderListResponse)
	err := c.cc.Invoke(ctx, MerchantService_PagedWholesaleOrderOfVendor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) PagedTradeOrderOfVendor(ctx context.Context, in *MerchantOrderRequest, opts ...grpc.CallOption) (*PagingMerchantOrderListResponse, error) {
	out := new(PagingMerchantOrderListResponse)
	err := c.cc.Invoke(ctx, MerchantService_PagedTradeOrderOfVendor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) WithdrawToMemberAccount(ctx context.Context, in *WithdrawToMemberAccountRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, MerchantService_WithdrawToMemberAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMchBuyerGroup_(ctx context.Context, in *MerchantBuyerGroupId, opts ...grpc.CallOption) (*SMerchantBuyerGroup, error) {
	out := new(SMerchantBuyerGroup)
	err := c.cc.Invoke(ctx, MerchantService_GetMchBuyerGroup__FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveMchBuyerGroup(ctx context.Context, in *SaveMerchantBuyerGroupRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, MerchantService_SaveMchBuyerGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetBuyerGroups(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*MerchantBuyerGroupListResponse, error) {
	out := new(MerchantBuyerGroupListResponse)
	err := c.cc.Invoke(ctx, MerchantService_GetBuyerGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetRebateRate(ctx context.Context, in *MerchantBuyerGroupId, opts ...grpc.CallOption) (*WholesaleRebateRateListResponse, error) {
	out := new(WholesaleRebateRateListResponse)
	err := c.cc.Invoke(ctx, MerchantService_GetRebateRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveGroupRebateRate(ctx context.Context, in *SaveWholesaleRebateRateRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, MerchantService_SaveGroupRebateRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetStaff(ctx context.Context, in *StaffRequest, opts ...grpc.CallOption) (*SStaff, error) {
	out := new(SStaff)
	err := c.cc.Invoke(ctx, MerchantService_GetStaff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetStaffByMember(ctx context.Context, in *StaffRequest, opts ...grpc.CallOption) (*SStaff, error) {
	out := new(SStaff)
	err := c.cc.Invoke(ctx, MerchantService_GetStaffByMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveStaff(ctx context.Context, in *SaveStaffRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, MerchantService_SaveStaff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAccount(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantAccount, error) {
	out := new(SMerchantAccount)
	err := c.cc.Invoke(ctx, MerchantService_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CarryToAccount(ctx context.Context, in *UserWalletCarryRequest, opts ...grpc.CallOption) (*TxResult, error) {
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MerchantService_CarryToAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) AdjustAccount(ctx context.Context, in *UserWalletAdjustRequest, opts ...grpc.CallOption) (*TxResult, error) {
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MerchantService_AdjustAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) Freeze(ctx context.Context, in *UserWalletFreezeRequest, opts ...grpc.CallOption) (*TxResult, error) {
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MerchantService_Freeze_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) Unfreeze(ctx context.Context, in *UserWalletUnfreezeRequest, opts ...grpc.CallOption) (*TxResult, error) {
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MerchantService_Unfreeze_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) RequestWithdrawal(ctx context.Context, in *UserWithdrawRequest, opts ...grpc.CallOption) (*TxResult, error) {
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MerchantService_RequestWithdrawal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ReviewWithdrawal(ctx context.Context, in *ReviewUserWithdrawalRequest, opts ...grpc.CallOption) (*TxResult, error) {
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MerchantService_ReviewWithdrawal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) FinishWithdrawal(ctx context.Context, in *FinishUserWithdrawalRequest, opts ...grpc.CallOption) (*TxResult, error) {
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MerchantService_FinishWithdrawal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServiceServer is the server API for MerchantService service.
// All implementations must embed UnimplementedMerchantServiceServer
// for forward compatibility
type MerchantServiceServer interface {
	// 获取商家的信息,mchId
	GetMerchant(context.Context, *Int64) (*QMerchant, error)
	// 根据电子邮箱获取商户编号,如果未注册,则返回0
	GetMerchantIdByUsername(context.Context, *String) (*Int64, error)
	// 注册商户并开店
	CreateMerchant(context.Context, *CreateMerchantRequest) (*MerchantCreateResponse, error)
	// 保存商户
	SaveMerchant(context.Context, *SaveMerchantRequest) (*Result, error)
	// 保存商户认证信息
	SaveAuthenticate(context.Context, *SaveAuthenticateRequest) (*Result, error)
	// 审核商户申请信息
	ReviewAuthenticate(context.Context, *MerchantReviewRequest) (*Result, error)
	// 验证用户密码,并返回编号。可传入商户或会员的账号密码
	CheckLogin(context.Context, *MchUserPwdRequest) (*MchLoginResponse, error)
	// 验证商户状态,mchId
	Stat(context.Context, *Int64) (*Result, error)
	// 同步批发商品,mchId
	SyncWholesaleItem(context.Context, *Int64) (*SyncWSItemsResponse, error)
	// 获取所有的交易设置,mchId
	GetAllTradeConf_(context.Context, *Int64) (*STradeConfListResponse, error)
	// 根据交易类型获取交易设置
	GetTradeConf(context.Context, *TradeConfRequest) (*STradeConf_, error)
	// 保存交易设置
	SaveTradeConf(context.Context, *TradeConfSaveRequest) (*Result, error)
	// 根据会员号获取商户编号
	GetMerchantIdByMember(context.Context, *MemberId) (*Int64, error)
	// * 更换会员绑定
	ChangeMemberBind(context.Context, *ChangeMemberBindRequest) (*Result, error)
	// 设置商户启用或停用
	SetEnabled(context.Context, *MerchantDisableRequest) (*Result, error)
	// 根据主机查询商户编号
	GetMerchantIdByHost(context.Context, *String) (*Int64, error)
	// 获取商户的域名
	GetMerchantMajorHost(context.Context, *MerchantId) (*String, error)
	SaveSaleConf(context.Context, *SaveMerchantSaleConfRequest) (*Result, error)
	GetSaleConf(context.Context, *MerchantId) (*SMerchantSaleConf, error)
	GetShopId(context.Context, *MerchantId) (*Int64, error)
	// 修改密码
	ChangePassword(context.Context, *ModifyMerchantPasswordRequest) (*Result, error)
	// 保存API信息
	// rpc SaveApiInfo(mchId int64, d *merchant.ApiInfo) error
	// 获取API接口
	GetApiInfo(context.Context, *MerchantId) (*SMerchantApiInfo, error)
	// 启用/停用接口权限
	ToggleApiPerm(context.Context, *MerchantApiPermRequest) (*Result, error)
	// 根据API ID获取MerchantId
	GetMerchantIdByApiId(context.Context, *String) (*Int64, error)
	// 查询分页订单
	PagedNormalOrderOfVendor(context.Context, *MerchantOrderRequest) (*PagingMerchantOrderListResponse, error)
	// 查询分页订单
	PagedWholesaleOrderOfVendor(context.Context, *MerchantOrderRequest) (*PagingMerchantOrderListResponse, error)
	// 查询分页订单
	PagedTradeOrderOfVendor(context.Context, *MerchantOrderRequest) (*PagingMerchantOrderListResponse, error)
	// 提到会员账户
	WithdrawToMemberAccount(context.Context, *WithdrawToMemberAccountRequest) (*Result, error)
	GetMchBuyerGroup_(context.Context, *MerchantBuyerGroupId) (*SMerchantBuyerGroup, error)
	// 保存
	SaveMchBuyerGroup(context.Context, *SaveMerchantBuyerGroupRequest) (*Result, error)
	// 获取买家分组
	GetBuyerGroups(context.Context, *MerchantId) (*MerchantBuyerGroupListResponse, error)
	// 获取批发返点率
	GetRebateRate(context.Context, *MerchantBuyerGroupId) (*WholesaleRebateRateListResponse, error)
	// 保存分组返点率
	SaveGroupRebateRate(context.Context, *SaveWholesaleRebateRateRequest) (*Result, error)
	// 获取商户员工
	GetStaff(context.Context, *StaffRequest) (*SStaff, error)
	// 根据会员编号获取商户员工
	GetStaffByMember(context.Context, *StaffRequest) (*SStaff, error)
	// 保存员工
	SaveStaff(context.Context, *SaveStaffRequest) (*Result, error)
	// 获取钱包账户
	GetAccount(context.Context, *MerchantId) (*SMerchantAccount, error)
	// 账户入账
	CarryToAccount(context.Context, *UserWalletCarryRequest) (*TxResult, error)
	// 账户人工调整
	AdjustAccount(context.Context, *UserWalletAdjustRequest) (*TxResult, error)
	// 账户冻结
	Freeze(context.Context, *UserWalletFreezeRequest) (*TxResult, error)
	// 账户解冻
	Unfreeze(context.Context, *UserWalletUnfreezeRequest) (*TxResult, error)
	// 提现并返回提现编号,交易号以及错误信息
	RequestWithdrawal(context.Context, *UserWithdrawRequest) (*TxResult, error)
	// 确认提现
	ReviewWithdrawal(context.Context, *ReviewUserWithdrawalRequest) (*TxResult, error)
	// 收到款项,完成提现
	FinishWithdrawal(context.Context, *FinishUserWithdrawalRequest) (*TxResult, error)
	mustEmbedUnimplementedMerchantServiceServer()
}

// UnimplementedMerchantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMerchantServiceServer struct {
}

func (UnimplementedMerchantServiceServer) GetMerchant(context.Context, *Int64) (*QMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) GetMerchantIdByUsername(context.Context, *String) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantIdByUsername not implemented")
}
func (UnimplementedMerchantServiceServer) CreateMerchant(context.Context, *CreateMerchantRequest) (*MerchantCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) SaveMerchant(context.Context, *SaveMerchantRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) SaveAuthenticate(context.Context, *SaveAuthenticateRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAuthenticate not implemented")
}
func (UnimplementedMerchantServiceServer) ReviewAuthenticate(context.Context, *MerchantReviewRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewAuthenticate not implemented")
}
func (UnimplementedMerchantServiceServer) CheckLogin(context.Context, *MchUserPwdRequest) (*MchLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLogin not implemented")
}
func (UnimplementedMerchantServiceServer) Stat(context.Context, *Int64) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedMerchantServiceServer) SyncWholesaleItem(context.Context, *Int64) (*SyncWSItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncWholesaleItem not implemented")
}
func (UnimplementedMerchantServiceServer) GetAllTradeConf_(context.Context, *Int64) (*STradeConfListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTradeConf_ not implemented")
}
func (UnimplementedMerchantServiceServer) GetTradeConf(context.Context, *TradeConfRequest) (*STradeConf_, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradeConf not implemented")
}
func (UnimplementedMerchantServiceServer) SaveTradeConf(context.Context, *TradeConfSaveRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTradeConf not implemented")
}
func (UnimplementedMerchantServiceServer) GetMerchantIdByMember(context.Context, *MemberId) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantIdByMember not implemented")
}
func (UnimplementedMerchantServiceServer) ChangeMemberBind(context.Context, *ChangeMemberBindRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMemberBind not implemented")
}
func (UnimplementedMerchantServiceServer) SetEnabled(context.Context, *MerchantDisableRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnabled not implemented")
}
func (UnimplementedMerchantServiceServer) GetMerchantIdByHost(context.Context, *String) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantIdByHost not implemented")
}
func (UnimplementedMerchantServiceServer) GetMerchantMajorHost(context.Context, *MerchantId) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantMajorHost not implemented")
}
func (UnimplementedMerchantServiceServer) SaveSaleConf(context.Context, *SaveMerchantSaleConfRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSaleConf not implemented")
}
func (UnimplementedMerchantServiceServer) GetSaleConf(context.Context, *MerchantId) (*SMerchantSaleConf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSaleConf not implemented")
}
func (UnimplementedMerchantServiceServer) GetShopId(context.Context, *MerchantId) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopId not implemented")
}
func (UnimplementedMerchantServiceServer) ChangePassword(context.Context, *ModifyMerchantPasswordRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedMerchantServiceServer) GetApiInfo(context.Context, *MerchantId) (*SMerchantApiInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiInfo not implemented")
}
func (UnimplementedMerchantServiceServer) ToggleApiPerm(context.Context, *MerchantApiPermRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleApiPerm not implemented")
}
func (UnimplementedMerchantServiceServer) GetMerchantIdByApiId(context.Context, *String) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantIdByApiId not implemented")
}
func (UnimplementedMerchantServiceServer) PagedNormalOrderOfVendor(context.Context, *MerchantOrderRequest) (*PagingMerchantOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagedNormalOrderOfVendor not implemented")
}
func (UnimplementedMerchantServiceServer) PagedWholesaleOrderOfVendor(context.Context, *MerchantOrderRequest) (*PagingMerchantOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagedWholesaleOrderOfVendor not implemented")
}
func (UnimplementedMerchantServiceServer) PagedTradeOrderOfVendor(context.Context, *MerchantOrderRequest) (*PagingMerchantOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagedTradeOrderOfVendor not implemented")
}
func (UnimplementedMerchantServiceServer) WithdrawToMemberAccount(context.Context, *WithdrawToMemberAccountRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawToMemberAccount not implemented")
}
func (UnimplementedMerchantServiceServer) GetMchBuyerGroup_(context.Context, *MerchantBuyerGroupId) (*SMerchantBuyerGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMchBuyerGroup_ not implemented")
}
func (UnimplementedMerchantServiceServer) SaveMchBuyerGroup(context.Context, *SaveMerchantBuyerGroupRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMchBuyerGroup not implemented")
}
func (UnimplementedMerchantServiceServer) GetBuyerGroups(context.Context, *MerchantId) (*MerchantBuyerGroupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuyerGroups not implemented")
}
func (UnimplementedMerchantServiceServer) GetRebateRate(context.Context, *MerchantBuyerGroupId) (*WholesaleRebateRateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRebateRate not implemented")
}
func (UnimplementedMerchantServiceServer) SaveGroupRebateRate(context.Context, *SaveWholesaleRebateRateRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGroupRebateRate not implemented")
}
func (UnimplementedMerchantServiceServer) GetStaff(context.Context, *StaffRequest) (*SStaff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaff not implemented")
}
func (UnimplementedMerchantServiceServer) GetStaffByMember(context.Context, *StaffRequest) (*SStaff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaffByMember not implemented")
}
func (UnimplementedMerchantServiceServer) SaveStaff(context.Context, *SaveStaffRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStaff not implemented")
}
func (UnimplementedMerchantServiceServer) GetAccount(context.Context, *MerchantId) (*SMerchantAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedMerchantServiceServer) CarryToAccount(context.Context, *UserWalletCarryRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CarryToAccount not implemented")
}
func (UnimplementedMerchantServiceServer) AdjustAccount(context.Context, *UserWalletAdjustRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustAccount not implemented")
}
func (UnimplementedMerchantServiceServer) Freeze(context.Context, *UserWalletFreezeRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Freeze not implemented")
}
func (UnimplementedMerchantServiceServer) Unfreeze(context.Context, *UserWalletUnfreezeRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfreeze not implemented")
}
func (UnimplementedMerchantServiceServer) RequestWithdrawal(context.Context, *UserWithdrawRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestWithdrawal not implemented")
}
func (UnimplementedMerchantServiceServer) ReviewWithdrawal(context.Context, *ReviewUserWithdrawalRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewWithdrawal not implemented")
}
func (UnimplementedMerchantServiceServer) FinishWithdrawal(context.Context, *FinishUserWithdrawalRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishWithdrawal not implemented")
}
func (UnimplementedMerchantServiceServer) mustEmbedUnimplementedMerchantServiceServer() {}

// UnsafeMerchantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantServiceServer will
// result in compilation errors.
type UnsafeMerchantServiceServer interface {
	mustEmbedUnimplementedMerchantServiceServer()
}

func RegisterMerchantServiceServer(s grpc.ServiceRegistrar, srv MerchantServiceServer) {
	s.RegisterService(&MerchantService_ServiceDesc, srv)
}

func _MerchantService_GetMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchant(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchantIdByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantIdByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetMerchantIdByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantIdByUsername(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CreateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_CreateMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateMerchant(ctx, req.(*CreateMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_SaveMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveMerchant(ctx, req.(*SaveMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveAuthenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveAuthenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_SaveAuthenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveAuthenticate(ctx, req.(*SaveAuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ReviewAuthenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ReviewAuthenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ReviewAuthenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ReviewAuthenticate(ctx, req.(*MerchantReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MchUserPwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_CheckLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CheckLogin(ctx, req.(*MchUserPwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).Stat(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SyncWholesaleItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SyncWholesaleItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_SyncWholesaleItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SyncWholesaleItem(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAllTradeConf__Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAllTradeConf_(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetAllTradeConf__FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAllTradeConf_(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetTradeConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetTradeConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetTradeConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetTradeConf(ctx, req.(*TradeConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveTradeConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeConfSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveTradeConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_SaveTradeConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveTradeConf(ctx, req.(*TradeConfSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchantIdByMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantIdByMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetMerchantIdByMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantIdByMember(ctx, req.(*MemberId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ChangeMemberBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMemberBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ChangeMemberBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ChangeMemberBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ChangeMemberBind(ctx, req.(*ChangeMemberBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SetEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantDisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SetEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_SetEnabled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SetEnabled(ctx, req.(*MerchantDisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchantIdByHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantIdByHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetMerchantIdByHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantIdByHost(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchantMajorHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantMajorHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetMerchantMajorHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantMajorHost(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveSaleConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMerchantSaleConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveSaleConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_SaveSaleConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveSaleConf(ctx, req.(*SaveMerchantSaleConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetSaleConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetSaleConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetSaleConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetSaleConf(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetShopId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetShopId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetShopId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetShopId(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyMerchantPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ChangePassword(ctx, req.(*ModifyMerchantPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetApiInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetApiInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetApiInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetApiInfo(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ToggleApiPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantApiPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ToggleApiPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ToggleApiPerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ToggleApiPerm(ctx, req.(*MerchantApiPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchantIdByApiId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantIdByApiId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetMerchantIdByApiId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantIdByApiId(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_PagedNormalOrderOfVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).PagedNormalOrderOfVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_PagedNormalOrderOfVendor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).PagedNormalOrderOfVendor(ctx, req.(*MerchantOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_PagedWholesaleOrderOfVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).PagedWholesaleOrderOfVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_PagedWholesaleOrderOfVendor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).PagedWholesaleOrderOfVendor(ctx, req.(*MerchantOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_PagedTradeOrderOfVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).PagedTradeOrderOfVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_PagedTradeOrderOfVendor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).PagedTradeOrderOfVendor(ctx, req.(*MerchantOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_WithdrawToMemberAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawToMemberAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).WithdrawToMemberAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_WithdrawToMemberAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).WithdrawToMemberAccount(ctx, req.(*WithdrawToMemberAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMchBuyerGroup__Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantBuyerGroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMchBuyerGroup_(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetMchBuyerGroup__FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMchBuyerGroup_(ctx, req.(*MerchantBuyerGroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveMchBuyerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMerchantBuyerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveMchBuyerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_SaveMchBuyerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveMchBuyerGroup(ctx, req.(*SaveMerchantBuyerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetBuyerGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetBuyerGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetBuyerGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetBuyerGroups(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetRebateRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantBuyerGroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetRebateRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetRebateRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetRebateRate(ctx, req.(*MerchantBuyerGroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveGroupRebateRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveWholesaleRebateRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveGroupRebateRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_SaveGroupRebateRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveGroupRebateRate(ctx, req.(*SaveWholesaleRebateRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetStaff(ctx, req.(*StaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetStaffByMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetStaffByMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetStaffByMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetStaffByMember(ctx, req.(*StaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_SaveStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveStaff(ctx, req.(*SaveStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAccount(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CarryToAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWalletCarryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CarryToAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_CarryToAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CarryToAccount(ctx, req.(*UserWalletCarryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_AdjustAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWalletAdjustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).AdjustAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_AdjustAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).AdjustAccount(ctx, req.(*UserWalletAdjustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_Freeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWalletFreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).Freeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_Freeze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).Freeze(ctx, req.(*UserWalletFreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_Unfreeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWalletUnfreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).Unfreeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_Unfreeze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).Unfreeze(ctx, req.(*UserWalletUnfreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_RequestWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).RequestWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_RequestWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).RequestWithdrawal(ctx, req.(*UserWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ReviewWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewUserWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ReviewWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ReviewWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ReviewWithdrawal(ctx, req.(*ReviewUserWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_FinishWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishUserWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).FinishWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_FinishWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).FinishWithdrawal(ctx, req.(*FinishUserWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantService_ServiceDesc is the grpc.ServiceDesc for MerchantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MerchantService",
	HandlerType: (*MerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMerchant",
			Handler:    _MerchantService_GetMerchant_Handler,
		},
		{
			MethodName: "GetMerchantIdByUsername",
			Handler:    _MerchantService_GetMerchantIdByUsername_Handler,
		},
		{
			MethodName: "CreateMerchant",
			Handler:    _MerchantService_CreateMerchant_Handler,
		},
		{
			MethodName: "SaveMerchant",
			Handler:    _MerchantService_SaveMerchant_Handler,
		},
		{
			MethodName: "SaveAuthenticate",
			Handler:    _MerchantService_SaveAuthenticate_Handler,
		},
		{
			MethodName: "ReviewAuthenticate",
			Handler:    _MerchantService_ReviewAuthenticate_Handler,
		},
		{
			MethodName: "CheckLogin",
			Handler:    _MerchantService_CheckLogin_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _MerchantService_Stat_Handler,
		},
		{
			MethodName: "SyncWholesaleItem",
			Handler:    _MerchantService_SyncWholesaleItem_Handler,
		},
		{
			MethodName: "GetAllTradeConf_",
			Handler:    _MerchantService_GetAllTradeConf__Handler,
		},
		{
			MethodName: "GetTradeConf",
			Handler:    _MerchantService_GetTradeConf_Handler,
		},
		{
			MethodName: "SaveTradeConf",
			Handler:    _MerchantService_SaveTradeConf_Handler,
		},
		{
			MethodName: "GetMerchantIdByMember",
			Handler:    _MerchantService_GetMerchantIdByMember_Handler,
		},
		{
			MethodName: "ChangeMemberBind",
			Handler:    _MerchantService_ChangeMemberBind_Handler,
		},
		{
			MethodName: "SetEnabled",
			Handler:    _MerchantService_SetEnabled_Handler,
		},
		{
			MethodName: "GetMerchantIdByHost",
			Handler:    _MerchantService_GetMerchantIdByHost_Handler,
		},
		{
			MethodName: "GetMerchantMajorHost",
			Handler:    _MerchantService_GetMerchantMajorHost_Handler,
		},
		{
			MethodName: "SaveSaleConf",
			Handler:    _MerchantService_SaveSaleConf_Handler,
		},
		{
			MethodName: "GetSaleConf",
			Handler:    _MerchantService_GetSaleConf_Handler,
		},
		{
			MethodName: "GetShopId",
			Handler:    _MerchantService_GetShopId_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _MerchantService_ChangePassword_Handler,
		},
		{
			MethodName: "GetApiInfo",
			Handler:    _MerchantService_GetApiInfo_Handler,
		},
		{
			MethodName: "ToggleApiPerm",
			Handler:    _MerchantService_ToggleApiPerm_Handler,
		},
		{
			MethodName: "GetMerchantIdByApiId",
			Handler:    _MerchantService_GetMerchantIdByApiId_Handler,
		},
		{
			MethodName: "PagedNormalOrderOfVendor",
			Handler:    _MerchantService_PagedNormalOrderOfVendor_Handler,
		},
		{
			MethodName: "PagedWholesaleOrderOfVendor",
			Handler:    _MerchantService_PagedWholesaleOrderOfVendor_Handler,
		},
		{
			MethodName: "PagedTradeOrderOfVendor",
			Handler:    _MerchantService_PagedTradeOrderOfVendor_Handler,
		},
		{
			MethodName: "WithdrawToMemberAccount",
			Handler:    _MerchantService_WithdrawToMemberAccount_Handler,
		},
		{
			MethodName: "GetMchBuyerGroup_",
			Handler:    _MerchantService_GetMchBuyerGroup__Handler,
		},
		{
			MethodName: "SaveMchBuyerGroup",
			Handler:    _MerchantService_SaveMchBuyerGroup_Handler,
		},
		{
			MethodName: "GetBuyerGroups",
			Handler:    _MerchantService_GetBuyerGroups_Handler,
		},
		{
			MethodName: "GetRebateRate",
			Handler:    _MerchantService_GetRebateRate_Handler,
		},
		{
			MethodName: "SaveGroupRebateRate",
			Handler:    _MerchantService_SaveGroupRebateRate_Handler,
		},
		{
			MethodName: "GetStaff",
			Handler:    _MerchantService_GetStaff_Handler,
		},
		{
			MethodName: "GetStaffByMember",
			Handler:    _MerchantService_GetStaffByMember_Handler,
		},
		{
			MethodName: "SaveStaff",
			Handler:    _MerchantService_SaveStaff_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _MerchantService_GetAccount_Handler,
		},
		{
			MethodName: "CarryToAccount",
			Handler:    _MerchantService_CarryToAccount_Handler,
		},
		{
			MethodName: "AdjustAccount",
			Handler:    _MerchantService_AdjustAccount_Handler,
		},
		{
			MethodName: "Freeze",
			Handler:    _MerchantService_Freeze_Handler,
		},
		{
			MethodName: "Unfreeze",
			Handler:    _MerchantService_Unfreeze_Handler,
		},
		{
			MethodName: "RequestWithdrawal",
			Handler:    _MerchantService_RequestWithdrawal_Handler,
		},
		{
			MethodName: "ReviewWithdrawal",
			Handler:    _MerchantService_ReviewWithdrawal_Handler,
		},
		{
			MethodName: "FinishWithdrawal",
			Handler:    _MerchantService_FinishWithdrawal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant_service.proto",
}
