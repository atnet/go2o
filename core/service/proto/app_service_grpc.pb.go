// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: app_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppService_SaveAppDistribution_FullMethodName   = "/AppService/SaveAppDistribution"
	AppService_GetAppDistribution_FullMethodName    = "/AppService/GetAppDistribution"
	AppService_DeleteAppDistribution_FullMethodName = "/AppService/DeleteAppDistribution"
	AppService_SaveAppVersion_FullMethodName        = "/AppService/SaveAppVersion"
	AppService_GetAppVersion_FullMethodName         = "/AppService/GetAppVersion"
	AppService_DeleteAppVersion_FullMethodName      = "/AppService/DeleteAppVersion"
	AppService_CheckAppVersion_FullMethodName       = "/AppService/CheckAppVersion"
)

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// APP服务
type AppServiceClient interface {
	// 保存分发应用
	SaveAppDistribution(ctx context.Context, in *SAppDistribution, opts ...grpc.CallOption) (*TxResult, error)
	// 获取分发应用
	GetAppDistribution(ctx context.Context, in *SysAppDistributionId, opts ...grpc.CallOption) (*SAppDistribution, error)
	// 删除分发应用
	DeleteAppDistribution(ctx context.Context, in *SysAppDistributionId, opts ...grpc.CallOption) (*TxResult, error)
	// 保存应用版本
	SaveAppVersion(ctx context.Context, in *SAppVersion, opts ...grpc.CallOption) (*TxResult, error)
	// 获取版本
	GetAppVersion(ctx context.Context, in *AppVersionId, opts ...grpc.CallOption) (*SAppVersion, error)
	// 删除版本
	DeleteAppVersion(ctx context.Context, in *AppVersionId, opts ...grpc.CallOption) (*TxResult, error)
	// 检测版本版本
	CheckAppVersion(ctx context.Context, in *CheckAppVersionRequest, opts ...grpc.CallOption) (*CheckAppVersionResponse, error)
}

type appServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServiceClient(cc grpc.ClientConnInterface) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) SaveAppDistribution(ctx context.Context, in *SAppDistribution, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, AppService_SaveAppDistribution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetAppDistribution(ctx context.Context, in *SysAppDistributionId, opts ...grpc.CallOption) (*SAppDistribution, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SAppDistribution)
	err := c.cc.Invoke(ctx, AppService_GetAppDistribution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteAppDistribution(ctx context.Context, in *SysAppDistributionId, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, AppService_DeleteAppDistribution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) SaveAppVersion(ctx context.Context, in *SAppVersion, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, AppService_SaveAppVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetAppVersion(ctx context.Context, in *AppVersionId, opts ...grpc.CallOption) (*SAppVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SAppVersion)
	err := c.cc.Invoke(ctx, AppService_GetAppVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteAppVersion(ctx context.Context, in *AppVersionId, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, AppService_DeleteAppVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CheckAppVersion(ctx context.Context, in *CheckAppVersionRequest, opts ...grpc.CallOption) (*CheckAppVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAppVersionResponse)
	err := c.cc.Invoke(ctx, AppService_CheckAppVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServiceServer is the server API for AppService service.
// All implementations must embed UnimplementedAppServiceServer
// for forward compatibility.
//
// APP服务
type AppServiceServer interface {
	// 保存分发应用
	SaveAppDistribution(context.Context, *SAppDistribution) (*TxResult, error)
	// 获取分发应用
	GetAppDistribution(context.Context, *SysAppDistributionId) (*SAppDistribution, error)
	// 删除分发应用
	DeleteAppDistribution(context.Context, *SysAppDistributionId) (*TxResult, error)
	// 保存应用版本
	SaveAppVersion(context.Context, *SAppVersion) (*TxResult, error)
	// 获取版本
	GetAppVersion(context.Context, *AppVersionId) (*SAppVersion, error)
	// 删除版本
	DeleteAppVersion(context.Context, *AppVersionId) (*TxResult, error)
	// 检测版本版本
	CheckAppVersion(context.Context, *CheckAppVersionRequest) (*CheckAppVersionResponse, error)
	mustEmbedUnimplementedAppServiceServer()
}

// UnimplementedAppServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppServiceServer struct{}

func (UnimplementedAppServiceServer) SaveAppDistribution(context.Context, *SAppDistribution) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAppDistribution not implemented")
}
func (UnimplementedAppServiceServer) GetAppDistribution(context.Context, *SysAppDistributionId) (*SAppDistribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppDistribution not implemented")
}
func (UnimplementedAppServiceServer) DeleteAppDistribution(context.Context, *SysAppDistributionId) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppDistribution not implemented")
}
func (UnimplementedAppServiceServer) SaveAppVersion(context.Context, *SAppVersion) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAppVersion not implemented")
}
func (UnimplementedAppServiceServer) GetAppVersion(context.Context, *AppVersionId) (*SAppVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppVersion not implemented")
}
func (UnimplementedAppServiceServer) DeleteAppVersion(context.Context, *AppVersionId) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppVersion not implemented")
}
func (UnimplementedAppServiceServer) CheckAppVersion(context.Context, *CheckAppVersionRequest) (*CheckAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAppVersion not implemented")
}
func (UnimplementedAppServiceServer) mustEmbedUnimplementedAppServiceServer() {}
func (UnimplementedAppServiceServer) testEmbeddedByValue()                    {}

// UnsafeAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServiceServer will
// result in compilation errors.
type UnsafeAppServiceServer interface {
	mustEmbedUnimplementedAppServiceServer()
}

func RegisterAppServiceServer(s grpc.ServiceRegistrar, srv AppServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppService_ServiceDesc, srv)
}

func _AppService_SaveAppDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SAppDistribution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).SaveAppDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_SaveAppDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).SaveAppDistribution(ctx, req.(*SAppDistribution))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetAppDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysAppDistributionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetAppDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetAppDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetAppDistribution(ctx, req.(*SysAppDistributionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteAppDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysAppDistributionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteAppDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteAppDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteAppDistribution(ctx, req.(*SysAppDistributionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_SaveAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SAppVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).SaveAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_SaveAppVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).SaveAppVersion(ctx, req.(*SAppVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVersionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetAppVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetAppVersion(ctx, req.(*AppVersionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVersionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteAppVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteAppVersion(ctx, req.(*AppVersionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CheckAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CheckAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_CheckAppVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CheckAppVersion(ctx, req.(*CheckAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppService_ServiceDesc is the grpc.ServiceDesc for AppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveAppDistribution",
			Handler:    _AppService_SaveAppDistribution_Handler,
		},
		{
			MethodName: "GetAppDistribution",
			Handler:    _AppService_GetAppDistribution_Handler,
		},
		{
			MethodName: "DeleteAppDistribution",
			Handler:    _AppService_DeleteAppDistribution_Handler,
		},
		{
			MethodName: "SaveAppVersion",
			Handler:    _AppService_SaveAppVersion_Handler,
		},
		{
			MethodName: "GetAppVersion",
			Handler:    _AppService_GetAppVersion_Handler,
		},
		{
			MethodName: "DeleteAppVersion",
			Handler:    _AppService_DeleteAppVersion_Handler,
		},
		{
			MethodName: "CheckAppVersion",
			Handler:    _AppService_CheckAppVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_service.proto",
}
