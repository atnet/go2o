// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: provider_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceProviderServiceClient is the client API for ServiceProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceProviderServiceClient interface {
	// 获取服务提供者
	GetOpenId(ctx context.Context, in *GetUserOpenIdRequest, opts ...grpc.CallOption) (*UserOpenIdResponse, error)
	// 获取小程序二维码
	GetMPCode(ctx context.Context, in *MPCodeRequest, opts ...grpc.CallOption) (*MPQrCodeResponse, error)
}

type serviceProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceProviderServiceClient(cc grpc.ClientConnInterface) ServiceProviderServiceClient {
	return &serviceProviderServiceClient{cc}
}

func (c *serviceProviderServiceClient) GetOpenId(ctx context.Context, in *GetUserOpenIdRequest, opts ...grpc.CallOption) (*UserOpenIdResponse, error) {
	out := new(UserOpenIdResponse)
	err := c.cc.Invoke(ctx, "/ServiceProviderService/GetOpenId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProviderServiceClient) GetMPCode(ctx context.Context, in *MPCodeRequest, opts ...grpc.CallOption) (*MPQrCodeResponse, error) {
	out := new(MPQrCodeResponse)
	err := c.cc.Invoke(ctx, "/ServiceProviderService/GetMPCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceProviderServiceServer is the server API for ServiceProviderService service.
// All implementations must embed UnimplementedServiceProviderServiceServer
// for forward compatibility
type ServiceProviderServiceServer interface {
	// 获取服务提供者
	GetOpenId(context.Context, *GetUserOpenIdRequest) (*UserOpenIdResponse, error)
	// 获取小程序二维码
	GetMPCode(context.Context, *MPCodeRequest) (*MPQrCodeResponse, error)
	mustEmbedUnimplementedServiceProviderServiceServer()
}

// UnimplementedServiceProviderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceProviderServiceServer struct {
}

func (UnimplementedServiceProviderServiceServer) GetOpenId(context.Context, *GetUserOpenIdRequest) (*UserOpenIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenId not implemented")
}
func (UnimplementedServiceProviderServiceServer) GetMPCode(context.Context, *MPCodeRequest) (*MPQrCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMPCode not implemented")
}
func (UnimplementedServiceProviderServiceServer) mustEmbedUnimplementedServiceProviderServiceServer() {
}

// UnsafeServiceProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceProviderServiceServer will
// result in compilation errors.
type UnsafeServiceProviderServiceServer interface {
	mustEmbedUnimplementedServiceProviderServiceServer()
}

func RegisterServiceProviderServiceServer(s grpc.ServiceRegistrar, srv ServiceProviderServiceServer) {
	s.RegisterService(&ServiceProviderService_ServiceDesc, srv)
}

func _ServiceProviderService_GetOpenId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOpenIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderServiceServer).GetOpenId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceProviderService/GetOpenId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderServiceServer).GetOpenId(ctx, req.(*GetUserOpenIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProviderService_GetMPCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MPCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProviderServiceServer).GetMPCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceProviderService/GetMPCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProviderServiceServer).GetMPCode(ctx, req.(*MPCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceProviderService_ServiceDesc is the grpc.ServiceDesc for ServiceProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceProviderService",
	HandlerType: (*ServiceProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOpenId",
			Handler:    _ServiceProviderService_GetOpenId_Handler,
		},
		{
			MethodName: "GetMPCode",
			Handler:    _ServiceProviderService_GetMPCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provider_service.proto",
}
