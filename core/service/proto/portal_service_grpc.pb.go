// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: portal_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PortalService_SaveNav_FullMethodName             = "/PortalService/SaveNav"
	PortalService_GetNav_FullMethodName              = "/PortalService/GetNav"
	PortalService_QueryNavList_FullMethodName        = "/PortalService/QueryNavList"
	PortalService_DeleteNav_FullMethodName           = "/PortalService/DeleteNav"
	PortalService_SaveNavGroup_FullMethodName        = "/PortalService/SaveNavGroup"
	PortalService_QueryNavGroupList_FullMethodName   = "/PortalService/QueryNavGroupList"
	PortalService_DeleteNavGroup_FullMethodName      = "/PortalService/DeleteNavGroup"
	PortalService_SaveSearchWord_FullMethodName      = "/PortalService/SaveSearchWord"
	PortalService_GetSearchWord_FullMethodName       = "/PortalService/GetSearchWord"
	PortalService_QuerySearchWordList_FullMethodName = "/PortalService/QuerySearchWordList"
	PortalService_DeleteSearchWord_FullMethodName    = "/PortalService/DeleteSearchWord"
)

// PortalServiceClient is the client API for PortalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortalServiceClient interface {
	// 保存门户导航
	SaveNav(ctx context.Context, in *SaveNavRequest, opts ...grpc.CallOption) (*SaveNavResponse, error)
	// 获取门户导航
	GetNav(ctx context.Context, in *PortalNavId, opts ...grpc.CallOption) (*SNav, error)
	// 获取门户导航列表
	QueryNavList(ctx context.Context, in *QueryNavRequest, opts ...grpc.CallOption) (*QueryNavResponse, error)
	// 删除门户导航
	DeleteNav(ctx context.Context, in *PortalNavId, opts ...grpc.CallOption) (*Result, error)
	// 保存导航分组
	SaveNavGroup(ctx context.Context, in *SaveNavGroupRequest, opts ...grpc.CallOption) (*SaveNavGroupResponse, error)
	// 获取导航分组列表
	QueryNavGroupList(ctx context.Context, in *QueryNavGroupRequest, opts ...grpc.CallOption) (*QueryNavGroupResponse, error)
	// 删除导航分组
	DeleteNavGroup(ctx context.Context, in *PortalNavGroupId, opts ...grpc.CallOption) (*Result, error)
	// * 保存热搜词
	SaveSearchWord(ctx context.Context, in *SaveSearchWordRequest, opts ...grpc.CallOption) (*SaveSearchWordResponse, error)
	// * 获取热搜词
	GetSearchWord(ctx context.Context, in *SysSearchWordId, opts ...grpc.CallOption) (*SSearchWord, error)
	// * 获取热搜词列表
	QuerySearchWordList(ctx context.Context, in *QuerySearchWordRequest, opts ...grpc.CallOption) (*QuerySearchWordResponse, error)
	// * 删除热搜词
	DeleteSearchWord(ctx context.Context, in *SysSearchWordId, opts ...grpc.CallOption) (*Result, error)
}

type portalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortalServiceClient(cc grpc.ClientConnInterface) PortalServiceClient {
	return &portalServiceClient{cc}
}

func (c *portalServiceClient) SaveNav(ctx context.Context, in *SaveNavRequest, opts ...grpc.CallOption) (*SaveNavResponse, error) {
	out := new(SaveNavResponse)
	err := c.cc.Invoke(ctx, PortalService_SaveNav_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) GetNav(ctx context.Context, in *PortalNavId, opts ...grpc.CallOption) (*SNav, error) {
	out := new(SNav)
	err := c.cc.Invoke(ctx, PortalService_GetNav_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) QueryNavList(ctx context.Context, in *QueryNavRequest, opts ...grpc.CallOption) (*QueryNavResponse, error) {
	out := new(QueryNavResponse)
	err := c.cc.Invoke(ctx, PortalService_QueryNavList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) DeleteNav(ctx context.Context, in *PortalNavId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, PortalService_DeleteNav_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) SaveNavGroup(ctx context.Context, in *SaveNavGroupRequest, opts ...grpc.CallOption) (*SaveNavGroupResponse, error) {
	out := new(SaveNavGroupResponse)
	err := c.cc.Invoke(ctx, PortalService_SaveNavGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) QueryNavGroupList(ctx context.Context, in *QueryNavGroupRequest, opts ...grpc.CallOption) (*QueryNavGroupResponse, error) {
	out := new(QueryNavGroupResponse)
	err := c.cc.Invoke(ctx, PortalService_QueryNavGroupList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) DeleteNavGroup(ctx context.Context, in *PortalNavGroupId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, PortalService_DeleteNavGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) SaveSearchWord(ctx context.Context, in *SaveSearchWordRequest, opts ...grpc.CallOption) (*SaveSearchWordResponse, error) {
	out := new(SaveSearchWordResponse)
	err := c.cc.Invoke(ctx, PortalService_SaveSearchWord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) GetSearchWord(ctx context.Context, in *SysSearchWordId, opts ...grpc.CallOption) (*SSearchWord, error) {
	out := new(SSearchWord)
	err := c.cc.Invoke(ctx, PortalService_GetSearchWord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) QuerySearchWordList(ctx context.Context, in *QuerySearchWordRequest, opts ...grpc.CallOption) (*QuerySearchWordResponse, error) {
	out := new(QuerySearchWordResponse)
	err := c.cc.Invoke(ctx, PortalService_QuerySearchWordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) DeleteSearchWord(ctx context.Context, in *SysSearchWordId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, PortalService_DeleteSearchWord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortalServiceServer is the server API for PortalService service.
// All implementations must embed UnimplementedPortalServiceServer
// for forward compatibility
type PortalServiceServer interface {
	// 保存门户导航
	SaveNav(context.Context, *SaveNavRequest) (*SaveNavResponse, error)
	// 获取门户导航
	GetNav(context.Context, *PortalNavId) (*SNav, error)
	// 获取门户导航列表
	QueryNavList(context.Context, *QueryNavRequest) (*QueryNavResponse, error)
	// 删除门户导航
	DeleteNav(context.Context, *PortalNavId) (*Result, error)
	// 保存导航分组
	SaveNavGroup(context.Context, *SaveNavGroupRequest) (*SaveNavGroupResponse, error)
	// 获取导航分组列表
	QueryNavGroupList(context.Context, *QueryNavGroupRequest) (*QueryNavGroupResponse, error)
	// 删除导航分组
	DeleteNavGroup(context.Context, *PortalNavGroupId) (*Result, error)
	// * 保存热搜词
	SaveSearchWord(context.Context, *SaveSearchWordRequest) (*SaveSearchWordResponse, error)
	// * 获取热搜词
	GetSearchWord(context.Context, *SysSearchWordId) (*SSearchWord, error)
	// * 获取热搜词列表
	QuerySearchWordList(context.Context, *QuerySearchWordRequest) (*QuerySearchWordResponse, error)
	// * 删除热搜词
	DeleteSearchWord(context.Context, *SysSearchWordId) (*Result, error)
	mustEmbedUnimplementedPortalServiceServer()
}

// UnimplementedPortalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortalServiceServer struct {
}

func (UnimplementedPortalServiceServer) SaveNav(context.Context, *SaveNavRequest) (*SaveNavResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveNav not implemented")
}
func (UnimplementedPortalServiceServer) GetNav(context.Context, *PortalNavId) (*SNav, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNav not implemented")
}
func (UnimplementedPortalServiceServer) QueryNavList(context.Context, *QueryNavRequest) (*QueryNavResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNavList not implemented")
}
func (UnimplementedPortalServiceServer) DeleteNav(context.Context, *PortalNavId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNav not implemented")
}
func (UnimplementedPortalServiceServer) SaveNavGroup(context.Context, *SaveNavGroupRequest) (*SaveNavGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveNavGroup not implemented")
}
func (UnimplementedPortalServiceServer) QueryNavGroupList(context.Context, *QueryNavGroupRequest) (*QueryNavGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNavGroupList not implemented")
}
func (UnimplementedPortalServiceServer) DeleteNavGroup(context.Context, *PortalNavGroupId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNavGroup not implemented")
}
func (UnimplementedPortalServiceServer) SaveSearchWord(context.Context, *SaveSearchWordRequest) (*SaveSearchWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSearchWord not implemented")
}
func (UnimplementedPortalServiceServer) GetSearchWord(context.Context, *SysSearchWordId) (*SSearchWord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchWord not implemented")
}
func (UnimplementedPortalServiceServer) QuerySearchWordList(context.Context, *QuerySearchWordRequest) (*QuerySearchWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySearchWordList not implemented")
}
func (UnimplementedPortalServiceServer) DeleteSearchWord(context.Context, *SysSearchWordId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSearchWord not implemented")
}
func (UnimplementedPortalServiceServer) mustEmbedUnimplementedPortalServiceServer() {}

// UnsafePortalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortalServiceServer will
// result in compilation errors.
type UnsafePortalServiceServer interface {
	mustEmbedUnimplementedPortalServiceServer()
}

func RegisterPortalServiceServer(s grpc.ServiceRegistrar, srv PortalServiceServer) {
	s.RegisterService(&PortalService_ServiceDesc, srv)
}

func _PortalService_SaveNav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveNavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).SaveNav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_SaveNav_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).SaveNav(ctx, req.(*SaveNavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_GetNav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortalNavId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).GetNav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_GetNav_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).GetNav(ctx, req.(*PortalNavId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_QueryNavList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).QueryNavList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_QueryNavList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).QueryNavList(ctx, req.(*QueryNavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_DeleteNav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortalNavId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).DeleteNav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_DeleteNav_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).DeleteNav(ctx, req.(*PortalNavId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_SaveNavGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveNavGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).SaveNavGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_SaveNavGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).SaveNavGroup(ctx, req.(*SaveNavGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_QueryNavGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNavGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).QueryNavGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_QueryNavGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).QueryNavGroupList(ctx, req.(*QueryNavGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_DeleteNavGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortalNavGroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).DeleteNavGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_DeleteNavGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).DeleteNavGroup(ctx, req.(*PortalNavGroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_SaveSearchWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSearchWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).SaveSearchWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_SaveSearchWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).SaveSearchWord(ctx, req.(*SaveSearchWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_GetSearchWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysSearchWordId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).GetSearchWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_GetSearchWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).GetSearchWord(ctx, req.(*SysSearchWordId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_QuerySearchWordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySearchWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).QuerySearchWordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_QuerySearchWordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).QuerySearchWordList(ctx, req.(*QuerySearchWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_DeleteSearchWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysSearchWordId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).DeleteSearchWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_DeleteSearchWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).DeleteSearchWord(ctx, req.(*SysSearchWordId))
	}
	return interceptor(ctx, in, info, handler)
}

// PortalService_ServiceDesc is the grpc.ServiceDesc for PortalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PortalService",
	HandlerType: (*PortalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveNav",
			Handler:    _PortalService_SaveNav_Handler,
		},
		{
			MethodName: "GetNav",
			Handler:    _PortalService_GetNav_Handler,
		},
		{
			MethodName: "QueryNavList",
			Handler:    _PortalService_QueryNavList_Handler,
		},
		{
			MethodName: "DeleteNav",
			Handler:    _PortalService_DeleteNav_Handler,
		},
		{
			MethodName: "SaveNavGroup",
			Handler:    _PortalService_SaveNavGroup_Handler,
		},
		{
			MethodName: "QueryNavGroupList",
			Handler:    _PortalService_QueryNavGroupList_Handler,
		},
		{
			MethodName: "DeleteNavGroup",
			Handler:    _PortalService_DeleteNavGroup_Handler,
		},
		{
			MethodName: "SaveSearchWord",
			Handler:    _PortalService_SaveSearchWord_Handler,
		},
		{
			MethodName: "GetSearchWord",
			Handler:    _PortalService_GetSearchWord_Handler,
		},
		{
			MethodName: "QuerySearchWordList",
			Handler:    _PortalService_QuerySearchWordList_Handler,
		},
		{
			MethodName: "DeleteSearchWord",
			Handler:    _PortalService_DeleteSearchWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portal_service.proto",
}
