//*
// Copyright (C) 2021 56X.NET, All rights reserved.
//
// name : template_service.proto
// author : jarrysix
// date : 2024/06/07 23:37:45
// description : 校验服务
// history :

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: check_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CheckService_SendCode_FullMethodName         = "/CheckService/SendCode"
	CheckService_CompareCode_FullMethodName      = "/CheckService/CompareCode"
	CheckService_GrantAccessToken_FullMethodName = "/CheckService/GrantAccessToken"
	CheckService_CheckAccessToken_FullMethodName = "/CheckService/CheckAccessToken"
)

// CheckServiceClient is the client API for CheckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckServiceClient interface {
	// 发送会员验证码消息, 并返回验证码, 验证码通过data.CheckCode获取
	SendCode(ctx context.Context, in *SendCheckCodeRequest, opts ...grpc.CallOption) (*SendCheckCodeResponse, error)
	// 比较验证码是否正确, 正确则返回用户编号
	CompareCode(ctx context.Context, in *CompareCheckCodeRequest, opts ...grpc.CallOption) (*CompareCheckCodeResponse, error)
	// 发放访问令牌,续期即重新颁发
	GrantAccessToken(ctx context.Context, in *GrantAccessTokenRequest, opts ...grpc.CallOption) (*GrantAccessTokenResponse, error)
	// 检查令牌是否有效并返回新的令牌
	CheckAccessToken(ctx context.Context, in *CheckAccessTokenRequest, opts ...grpc.CallOption) (*CheckAccessTokenResponse, error)
}

type checkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckServiceClient(cc grpc.ClientConnInterface) CheckServiceClient {
	return &checkServiceClient{cc}
}

func (c *checkServiceClient) SendCode(ctx context.Context, in *SendCheckCodeRequest, opts ...grpc.CallOption) (*SendCheckCodeResponse, error) {
	out := new(SendCheckCodeResponse)
	err := c.cc.Invoke(ctx, CheckService_SendCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkServiceClient) CompareCode(ctx context.Context, in *CompareCheckCodeRequest, opts ...grpc.CallOption) (*CompareCheckCodeResponse, error) {
	out := new(CompareCheckCodeResponse)
	err := c.cc.Invoke(ctx, CheckService_CompareCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkServiceClient) GrantAccessToken(ctx context.Context, in *GrantAccessTokenRequest, opts ...grpc.CallOption) (*GrantAccessTokenResponse, error) {
	out := new(GrantAccessTokenResponse)
	err := c.cc.Invoke(ctx, CheckService_GrantAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkServiceClient) CheckAccessToken(ctx context.Context, in *CheckAccessTokenRequest, opts ...grpc.CallOption) (*CheckAccessTokenResponse, error) {
	out := new(CheckAccessTokenResponse)
	err := c.cc.Invoke(ctx, CheckService_CheckAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckServiceServer is the server API for CheckService service.
// All implementations must embed UnimplementedCheckServiceServer
// for forward compatibility
type CheckServiceServer interface {
	// 发送会员验证码消息, 并返回验证码, 验证码通过data.CheckCode获取
	SendCode(context.Context, *SendCheckCodeRequest) (*SendCheckCodeResponse, error)
	// 比较验证码是否正确, 正确则返回用户编号
	CompareCode(context.Context, *CompareCheckCodeRequest) (*CompareCheckCodeResponse, error)
	// 发放访问令牌,续期即重新颁发
	GrantAccessToken(context.Context, *GrantAccessTokenRequest) (*GrantAccessTokenResponse, error)
	// 检查令牌是否有效并返回新的令牌
	CheckAccessToken(context.Context, *CheckAccessTokenRequest) (*CheckAccessTokenResponse, error)
	mustEmbedUnimplementedCheckServiceServer()
}

// UnimplementedCheckServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCheckServiceServer struct {
}

func (UnimplementedCheckServiceServer) SendCode(context.Context, *SendCheckCodeRequest) (*SendCheckCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCode not implemented")
}
func (UnimplementedCheckServiceServer) CompareCode(context.Context, *CompareCheckCodeRequest) (*CompareCheckCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareCode not implemented")
}
func (UnimplementedCheckServiceServer) GrantAccessToken(context.Context, *GrantAccessTokenRequest) (*GrantAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAccessToken not implemented")
}
func (UnimplementedCheckServiceServer) CheckAccessToken(context.Context, *CheckAccessTokenRequest) (*CheckAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccessToken not implemented")
}
func (UnimplementedCheckServiceServer) mustEmbedUnimplementedCheckServiceServer() {}

// UnsafeCheckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckServiceServer will
// result in compilation errors.
type UnsafeCheckServiceServer interface {
	mustEmbedUnimplementedCheckServiceServer()
}

func RegisterCheckServiceServer(s grpc.ServiceRegistrar, srv CheckServiceServer) {
	s.RegisterService(&CheckService_ServiceDesc, srv)
}

func _CheckService_SendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCheckCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServiceServer).SendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckService_SendCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServiceServer).SendCode(ctx, req.(*SendCheckCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckService_CompareCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareCheckCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServiceServer).CompareCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckService_CompareCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServiceServer).CompareCode(ctx, req.(*CompareCheckCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckService_GrantAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServiceServer).GrantAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckService_GrantAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServiceServer).GrantAccessToken(ctx, req.(*GrantAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckService_CheckAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServiceServer).CheckAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckService_CheckAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServiceServer).CheckAccessToken(ctx, req.(*CheckAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckService_ServiceDesc is the grpc.ServiceDesc for CheckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CheckService",
	HandlerType: (*CheckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCode",
			Handler:    _CheckService_SendCode_Handler,
		},
		{
			MethodName: "CompareCode",
			Handler:    _CheckService_CompareCode_Handler,
		},
		{
			MethodName: "GrantAccessToken",
			Handler:    _CheckService_GrantAccessToken_Handler,
		},
		{
			MethodName: "CheckAccessToken",
			Handler:    _CheckService_CheckAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "check_service.proto",
}
