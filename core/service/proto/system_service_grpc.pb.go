// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: system_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SystemService_CheckSensitive_FullMethodName        = "/SystemService/CheckSensitive"
	SystemService_ReplaceSensitive_FullMethodName      = "/SystemService/ReplaceSensitive"
	SystemService_GetSystemInfo_FullMethodName         = "/SystemService/GetSystemInfo"
	SystemService_FlushCache_FullMethodName            = "/SystemService/FlushCache"
	SystemService_GetOptionNames_FullMethodName        = "/SystemService/GetOptionNames"
	SystemService_GetChildOptions_FullMethodName       = "/SystemService/GetChildOptions"
	SystemService_SaveGeneralOption_FullMethodName     = "/SystemService/SaveGeneralOption"
	SystemService_DeleteGeneralOption_FullMethodName   = "/SystemService/DeleteGeneralOption"
	SystemService_SubmitSystemLog_FullMethodName       = "/SystemService/SubmitSystemLog"
	SystemService_DeleteSystemLog_FullMethodName       = "/SystemService/DeleteSystemLog"
	SystemService_QueryBanks_FullMethodName            = "/SystemService/QueryBanks"
	SystemService_GetSmsSetting_FullMethodName         = "/SystemService/GetSmsSetting"
	SystemService_SaveSmsSetting_FullMethodName        = "/SystemService/SaveSmsSetting"
	SystemService_CleanCache_FullMethodName            = "/SystemService/CleanCache"
	SystemService_SaveBoardHook_FullMethodName         = "/SystemService/SaveBoardHook"
	SystemService_ResourceUrl_FullMethodName           = "/SystemService/ResourceUrl"
	SystemService_RegisterApp_FullMethodName           = "/SystemService/RegisterApp"
	SystemService_GetApp_FullMethodName                = "/SystemService/GetApp"
	SystemService_GetAllSsoApp_FullMethodName          = "/SystemService/GetAllSsoApp"
	SystemService_UpdateSuperCredential_FullMethodName = "/SystemService/updateSuperCredential"
	SystemService_GetSyncLoginUrl_FullMethodName       = "/SystemService/GetSyncLoginUrl"
	SystemService_GetDistrictNames_FullMethodName      = "/SystemService/GetDistrictNames"
	SystemService_GetAreaString_FullMethodName         = "/SystemService/GetAreaString"
	SystemService_GetChildDistrict_FullMethodName      = "/SystemService/GetChildDistrict"
	SystemService_FindCity_FullMethodName              = "/SystemService/FindCity"
	SystemService_GetStation_FullMethodName            = "/SystemService/GetStation"
	SystemService_GetMoAppConf_FullMethodName          = "/SystemService/GetMoAppConf"
	SystemService_SaveMoAppConf_FullMethodName         = "/SystemService/SaveMoAppConf"
	SystemService_GetWxApiConfig_FullMethodName        = "/SystemService/GetWxApiConfig"
	SystemService_SaveWxApiConfig_FullMethodName       = "/SystemService/SaveWxApiConfig"
	SystemService_GetPayPlatform_FullMethodName        = "/SystemService/GetPayPlatform"
	SystemService_GetGlobMchSaleConf__FullMethodName   = "/SystemService/GetGlobMchSaleConf_"
	SystemService_SaveGlobMchSaleConf__FullMethodName  = "/SystemService/SaveGlobMchSaleConf_"
)

// SystemServiceClient is the client API for SystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 基础服务
type SystemServiceClient interface {
	// * 检测是否包含敏感词
	CheckSensitive(ctx context.Context, in *String, opts ...grpc.CallOption) (*Bool, error)
	// * 替换敏感词
	ReplaceSensitive(ctx context.Context, in *ReplaceSensitiveRequest, opts ...grpc.CallOption) (*String, error)
	// 获取系统信息
	GetSystemInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SSystemInfo, error)
	// 清除缓存
	FlushCache(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Result, error)
	// 获取选项名称
	GetOptionNames(ctx context.Context, in *GetNamesRequest, opts ...grpc.CallOption) (*IntStringMapResponse, error)
	// 获取下级选项,code
	GetChildOptions(ctx context.Context, in *OptionsRequest, opts ...grpc.CallOption) (*OptionsResponse, error)
	// 保存通用选项
	SaveGeneralOption(ctx context.Context, in *SGeneralOption, opts ...grpc.CallOption) (*TxResult, error)
	// 删除通用选项
	DeleteGeneralOption(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*TxResult, error)
	// 提交系统日志
	SubmitSystemLog(ctx context.Context, in *SubmitSystemLogRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 删除系统日志
	DeleteSystemLog(ctx context.Context, in *DeleteSystemLogRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 获取银行列表
	QueryBanks(ctx context.Context, in *QueryBanksRequest, opts ...grpc.CallOption) (*OptionsResponse, error)
	// * 获取短信API凭据, provider 短信服务商, 默认:http
	GetSmsSetting(ctx context.Context, in *GetSmsSettingRequest, opts ...grpc.CallOption) (*SSmsProviderSetting, error)
	// * 保存短信API凭据,@provider 短信服务商, 默认:http
	SaveSmsSetting(ctx context.Context, in *SSmsProviderSetting, opts ...grpc.CallOption) (*Result, error)
	// * 清除缓存
	CleanCache(ctx context.Context, in *CleanCacheRequest, opts ...grpc.CallOption) (*CleanCacheResponse, error)
	// * 保存面板HOOK数据,这通常是在第三方应用中初始化或调用,参见文档：BoardHooks
	SaveBoardHook(ctx context.Context, in *BoardHookSaveRequest, opts ...grpc.CallOption) (*Result, error)
	// 格式化资源地址并返回
	ResourceUrl(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	// 设置键值
	// rpc SetValue (Pair) returns (Result){}
	// 删除值,key
	// rpc DeleteValue (String) returns (Result){}
	// 根据前缀获取值,prefix
	// rpc GetValuesByPrefix (String) returns (StringMap){}
	// 注册单点登录应用,返回值：
	//   - 1. 成功，并返回token
	//   - -1. 接口地址不正确
	//   - -2. 已经注册
	RegisterApp(ctx context.Context, in *SSsoApp, opts ...grpc.CallOption) (*String, error)
	// 获取应用信息,name
	GetApp(ctx context.Context, in *String, opts ...grpc.CallOption) (*SSsoApp, error)
	// 获取单点登录应用
	GetAllSsoApp(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringListResponse, error)
	// 保存超级用户账号和密码
	UpdateSuperCredential(ctx context.Context, in *SuperPassswordRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 创建同步登录的地址,returnUrl
	GetSyncLoginUrl(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	// 获取地区名称,如:获取多个城市对应的名称
	GetDistrictNames(ctx context.Context, in *GetNamesRequest, opts ...grpc.CallOption) (*IntStringMapResponse, error)
	// 获取省市区字符串
	GetAreaString(ctx context.Context, in *AreaStringRequest, opts ...grpc.CallOption) (*String, error)
	// 获取下级区域,code
	GetChildDistrict(ctx context.Context, in *DistrictChildrenRequest, opts ...grpc.CallOption) (*AreaListResponse, error)
	// 查找城市信息
	FindCity(ctx context.Context, in *FindAreaRequest, opts ...grpc.CallOption) (*SArea, error)
	// 获取站点信息
	GetStation(ctx context.Context, in *GetStationRequest, opts ...grpc.CallOption) (*SStation, error)
	// 获取移动应用设置
	GetMoAppConf(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SMobileAppConfig, error)
	// 保存移动应用设置
	SaveMoAppConf(ctx context.Context, in *SMobileAppConfig, opts ...grpc.CallOption) (*Result, error)
	// 获取微信接口配置
	GetWxApiConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SWxApiConfig, error)
	// 保存微信接口配置
	SaveWxApiConfig(ctx context.Context, in *SWxApiConfig, opts ...grpc.CallOption) (*Result, error)
	// 获取支付平台
	GetPayPlatform(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PaymentPlatformResponse, error)
	// 获取全局商户销售设置
	GetGlobMchSaleConf_(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SGlobMchSaleConf, error)
	// 保存全局商户销售设置
	SaveGlobMchSaleConf_(ctx context.Context, in *SGlobMchSaleConf, opts ...grpc.CallOption) (*Result, error)
}

type systemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemServiceClient(cc grpc.ClientConnInterface) SystemServiceClient {
	return &systemServiceClient{cc}
}

func (c *systemServiceClient) CheckSensitive(ctx context.Context, in *String, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, SystemService_CheckSensitive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) ReplaceSensitive(ctx context.Context, in *ReplaceSensitiveRequest, opts ...grpc.CallOption) (*String, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(String)
	err := c.cc.Invoke(ctx, SystemService_ReplaceSensitive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetSystemInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SSystemInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSystemInfo)
	err := c.cc.Invoke(ctx, SystemService_GetSystemInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) FlushCache(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, SystemService_FlushCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetOptionNames(ctx context.Context, in *GetNamesRequest, opts ...grpc.CallOption) (*IntStringMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntStringMapResponse)
	err := c.cc.Invoke(ctx, SystemService_GetOptionNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetChildOptions(ctx context.Context, in *OptionsRequest, opts ...grpc.CallOption) (*OptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptionsResponse)
	err := c.cc.Invoke(ctx, SystemService_GetChildOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) SaveGeneralOption(ctx context.Context, in *SGeneralOption, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, SystemService_SaveGeneralOption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) DeleteGeneralOption(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, SystemService_DeleteGeneralOption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) SubmitSystemLog(ctx context.Context, in *SubmitSystemLogRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, SystemService_SubmitSystemLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) DeleteSystemLog(ctx context.Context, in *DeleteSystemLogRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, SystemService_DeleteSystemLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) QueryBanks(ctx context.Context, in *QueryBanksRequest, opts ...grpc.CallOption) (*OptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptionsResponse)
	err := c.cc.Invoke(ctx, SystemService_QueryBanks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetSmsSetting(ctx context.Context, in *GetSmsSettingRequest, opts ...grpc.CallOption) (*SSmsProviderSetting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSmsProviderSetting)
	err := c.cc.Invoke(ctx, SystemService_GetSmsSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) SaveSmsSetting(ctx context.Context, in *SSmsProviderSetting, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, SystemService_SaveSmsSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) CleanCache(ctx context.Context, in *CleanCacheRequest, opts ...grpc.CallOption) (*CleanCacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanCacheResponse)
	err := c.cc.Invoke(ctx, SystemService_CleanCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) SaveBoardHook(ctx context.Context, in *BoardHookSaveRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, SystemService_SaveBoardHook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) ResourceUrl(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(String)
	err := c.cc.Invoke(ctx, SystemService_ResourceUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) RegisterApp(ctx context.Context, in *SSsoApp, opts ...grpc.CallOption) (*String, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(String)
	err := c.cc.Invoke(ctx, SystemService_RegisterApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetApp(ctx context.Context, in *String, opts ...grpc.CallOption) (*SSsoApp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSsoApp)
	err := c.cc.Invoke(ctx, SystemService_GetApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetAllSsoApp(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringListResponse)
	err := c.cc.Invoke(ctx, SystemService_GetAllSsoApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) UpdateSuperCredential(ctx context.Context, in *SuperPassswordRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, SystemService_UpdateSuperCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetSyncLoginUrl(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(String)
	err := c.cc.Invoke(ctx, SystemService_GetSyncLoginUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetDistrictNames(ctx context.Context, in *GetNamesRequest, opts ...grpc.CallOption) (*IntStringMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntStringMapResponse)
	err := c.cc.Invoke(ctx, SystemService_GetDistrictNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetAreaString(ctx context.Context, in *AreaStringRequest, opts ...grpc.CallOption) (*String, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(String)
	err := c.cc.Invoke(ctx, SystemService_GetAreaString_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetChildDistrict(ctx context.Context, in *DistrictChildrenRequest, opts ...grpc.CallOption) (*AreaListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AreaListResponse)
	err := c.cc.Invoke(ctx, SystemService_GetChildDistrict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) FindCity(ctx context.Context, in *FindAreaRequest, opts ...grpc.CallOption) (*SArea, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SArea)
	err := c.cc.Invoke(ctx, SystemService_FindCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetStation(ctx context.Context, in *GetStationRequest, opts ...grpc.CallOption) (*SStation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SStation)
	err := c.cc.Invoke(ctx, SystemService_GetStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetMoAppConf(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SMobileAppConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SMobileAppConfig)
	err := c.cc.Invoke(ctx, SystemService_GetMoAppConf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) SaveMoAppConf(ctx context.Context, in *SMobileAppConfig, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, SystemService_SaveMoAppConf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetWxApiConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SWxApiConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SWxApiConfig)
	err := c.cc.Invoke(ctx, SystemService_GetWxApiConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) SaveWxApiConfig(ctx context.Context, in *SWxApiConfig, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, SystemService_SaveWxApiConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetPayPlatform(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PaymentPlatformResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentPlatformResponse)
	err := c.cc.Invoke(ctx, SystemService_GetPayPlatform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetGlobMchSaleConf_(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SGlobMchSaleConf, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SGlobMchSaleConf)
	err := c.cc.Invoke(ctx, SystemService_GetGlobMchSaleConf__FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) SaveGlobMchSaleConf_(ctx context.Context, in *SGlobMchSaleConf, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, SystemService_SaveGlobMchSaleConf__FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServiceServer is the server API for SystemService service.
// All implementations must embed UnimplementedSystemServiceServer
// for forward compatibility.
//
// 基础服务
type SystemServiceServer interface {
	// * 检测是否包含敏感词
	CheckSensitive(context.Context, *String) (*Bool, error)
	// * 替换敏感词
	ReplaceSensitive(context.Context, *ReplaceSensitiveRequest) (*String, error)
	// 获取系统信息
	GetSystemInfo(context.Context, *Empty) (*SSystemInfo, error)
	// 清除缓存
	FlushCache(context.Context, *Empty) (*Result, error)
	// 获取选项名称
	GetOptionNames(context.Context, *GetNamesRequest) (*IntStringMapResponse, error)
	// 获取下级选项,code
	GetChildOptions(context.Context, *OptionsRequest) (*OptionsResponse, error)
	// 保存通用选项
	SaveGeneralOption(context.Context, *SGeneralOption) (*TxResult, error)
	// 删除通用选项
	DeleteGeneralOption(context.Context, *Int64) (*TxResult, error)
	// 提交系统日志
	SubmitSystemLog(context.Context, *SubmitSystemLogRequest) (*TxResult, error)
	// 删除系统日志
	DeleteSystemLog(context.Context, *DeleteSystemLogRequest) (*TxResult, error)
	// 获取银行列表
	QueryBanks(context.Context, *QueryBanksRequest) (*OptionsResponse, error)
	// * 获取短信API凭据, provider 短信服务商, 默认:http
	GetSmsSetting(context.Context, *GetSmsSettingRequest) (*SSmsProviderSetting, error)
	// * 保存短信API凭据,@provider 短信服务商, 默认:http
	SaveSmsSetting(context.Context, *SSmsProviderSetting) (*Result, error)
	// * 清除缓存
	CleanCache(context.Context, *CleanCacheRequest) (*CleanCacheResponse, error)
	// * 保存面板HOOK数据,这通常是在第三方应用中初始化或调用,参见文档：BoardHooks
	SaveBoardHook(context.Context, *BoardHookSaveRequest) (*Result, error)
	// 格式化资源地址并返回
	ResourceUrl(context.Context, *String) (*String, error)
	// 设置键值
	// rpc SetValue (Pair) returns (Result){}
	// 删除值,key
	// rpc DeleteValue (String) returns (Result){}
	// 根据前缀获取值,prefix
	// rpc GetValuesByPrefix (String) returns (StringMap){}
	// 注册单点登录应用,返回值：
	//   - 1. 成功，并返回token
	//   - -1. 接口地址不正确
	//   - -2. 已经注册
	RegisterApp(context.Context, *SSsoApp) (*String, error)
	// 获取应用信息,name
	GetApp(context.Context, *String) (*SSsoApp, error)
	// 获取单点登录应用
	GetAllSsoApp(context.Context, *Empty) (*StringListResponse, error)
	// 保存超级用户账号和密码
	UpdateSuperCredential(context.Context, *SuperPassswordRequest) (*TxResult, error)
	// 创建同步登录的地址,returnUrl
	GetSyncLoginUrl(context.Context, *String) (*String, error)
	// 获取地区名称,如:获取多个城市对应的名称
	GetDistrictNames(context.Context, *GetNamesRequest) (*IntStringMapResponse, error)
	// 获取省市区字符串
	GetAreaString(context.Context, *AreaStringRequest) (*String, error)
	// 获取下级区域,code
	GetChildDistrict(context.Context, *DistrictChildrenRequest) (*AreaListResponse, error)
	// 查找城市信息
	FindCity(context.Context, *FindAreaRequest) (*SArea, error)
	// 获取站点信息
	GetStation(context.Context, *GetStationRequest) (*SStation, error)
	// 获取移动应用设置
	GetMoAppConf(context.Context, *Empty) (*SMobileAppConfig, error)
	// 保存移动应用设置
	SaveMoAppConf(context.Context, *SMobileAppConfig) (*Result, error)
	// 获取微信接口配置
	GetWxApiConfig(context.Context, *Empty) (*SWxApiConfig, error)
	// 保存微信接口配置
	SaveWxApiConfig(context.Context, *SWxApiConfig) (*Result, error)
	// 获取支付平台
	GetPayPlatform(context.Context, *Empty) (*PaymentPlatformResponse, error)
	// 获取全局商户销售设置
	GetGlobMchSaleConf_(context.Context, *Empty) (*SGlobMchSaleConf, error)
	// 保存全局商户销售设置
	SaveGlobMchSaleConf_(context.Context, *SGlobMchSaleConf) (*Result, error)
	mustEmbedUnimplementedSystemServiceServer()
}

// UnimplementedSystemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSystemServiceServer struct{}

func (UnimplementedSystemServiceServer) CheckSensitive(context.Context, *String) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSensitive not implemented")
}
func (UnimplementedSystemServiceServer) ReplaceSensitive(context.Context, *ReplaceSensitiveRequest) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceSensitive not implemented")
}
func (UnimplementedSystemServiceServer) GetSystemInfo(context.Context, *Empty) (*SSystemInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (UnimplementedSystemServiceServer) FlushCache(context.Context, *Empty) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushCache not implemented")
}
func (UnimplementedSystemServiceServer) GetOptionNames(context.Context, *GetNamesRequest) (*IntStringMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptionNames not implemented")
}
func (UnimplementedSystemServiceServer) GetChildOptions(context.Context, *OptionsRequest) (*OptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildOptions not implemented")
}
func (UnimplementedSystemServiceServer) SaveGeneralOption(context.Context, *SGeneralOption) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGeneralOption not implemented")
}
func (UnimplementedSystemServiceServer) DeleteGeneralOption(context.Context, *Int64) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGeneralOption not implemented")
}
func (UnimplementedSystemServiceServer) SubmitSystemLog(context.Context, *SubmitSystemLogRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSystemLog not implemented")
}
func (UnimplementedSystemServiceServer) DeleteSystemLog(context.Context, *DeleteSystemLogRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSystemLog not implemented")
}
func (UnimplementedSystemServiceServer) QueryBanks(context.Context, *QueryBanksRequest) (*OptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBanks not implemented")
}
func (UnimplementedSystemServiceServer) GetSmsSetting(context.Context, *GetSmsSettingRequest) (*SSmsProviderSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsSetting not implemented")
}
func (UnimplementedSystemServiceServer) SaveSmsSetting(context.Context, *SSmsProviderSetting) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSmsSetting not implemented")
}
func (UnimplementedSystemServiceServer) CleanCache(context.Context, *CleanCacheRequest) (*CleanCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanCache not implemented")
}
func (UnimplementedSystemServiceServer) SaveBoardHook(context.Context, *BoardHookSaveRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBoardHook not implemented")
}
func (UnimplementedSystemServiceServer) ResourceUrl(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceUrl not implemented")
}
func (UnimplementedSystemServiceServer) RegisterApp(context.Context, *SSsoApp) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterApp not implemented")
}
func (UnimplementedSystemServiceServer) GetApp(context.Context, *String) (*SSsoApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedSystemServiceServer) GetAllSsoApp(context.Context, *Empty) (*StringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSsoApp not implemented")
}
func (UnimplementedSystemServiceServer) UpdateSuperCredential(context.Context, *SuperPassswordRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSuperCredential not implemented")
}
func (UnimplementedSystemServiceServer) GetSyncLoginUrl(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncLoginUrl not implemented")
}
func (UnimplementedSystemServiceServer) GetDistrictNames(context.Context, *GetNamesRequest) (*IntStringMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistrictNames not implemented")
}
func (UnimplementedSystemServiceServer) GetAreaString(context.Context, *AreaStringRequest) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAreaString not implemented")
}
func (UnimplementedSystemServiceServer) GetChildDistrict(context.Context, *DistrictChildrenRequest) (*AreaListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildDistrict not implemented")
}
func (UnimplementedSystemServiceServer) FindCity(context.Context, *FindAreaRequest) (*SArea, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCity not implemented")
}
func (UnimplementedSystemServiceServer) GetStation(context.Context, *GetStationRequest) (*SStation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStation not implemented")
}
func (UnimplementedSystemServiceServer) GetMoAppConf(context.Context, *Empty) (*SMobileAppConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoAppConf not implemented")
}
func (UnimplementedSystemServiceServer) SaveMoAppConf(context.Context, *SMobileAppConfig) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMoAppConf not implemented")
}
func (UnimplementedSystemServiceServer) GetWxApiConfig(context.Context, *Empty) (*SWxApiConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWxApiConfig not implemented")
}
func (UnimplementedSystemServiceServer) SaveWxApiConfig(context.Context, *SWxApiConfig) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveWxApiConfig not implemented")
}
func (UnimplementedSystemServiceServer) GetPayPlatform(context.Context, *Empty) (*PaymentPlatformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayPlatform not implemented")
}
func (UnimplementedSystemServiceServer) GetGlobMchSaleConf_(context.Context, *Empty) (*SGlobMchSaleConf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobMchSaleConf_ not implemented")
}
func (UnimplementedSystemServiceServer) SaveGlobMchSaleConf_(context.Context, *SGlobMchSaleConf) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGlobMchSaleConf_ not implemented")
}
func (UnimplementedSystemServiceServer) mustEmbedUnimplementedSystemServiceServer() {}
func (UnimplementedSystemServiceServer) testEmbeddedByValue()                       {}

// UnsafeSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServiceServer will
// result in compilation errors.
type UnsafeSystemServiceServer interface {
	mustEmbedUnimplementedSystemServiceServer()
}

func RegisterSystemServiceServer(s grpc.ServiceRegistrar, srv SystemServiceServer) {
	// If the following call pancis, it indicates UnimplementedSystemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SystemService_ServiceDesc, srv)
}

func _SystemService_CheckSensitive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).CheckSensitive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_CheckSensitive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).CheckSensitive(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_ReplaceSensitive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceSensitiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).ReplaceSensitive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_ReplaceSensitive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).ReplaceSensitive(ctx, req.(*ReplaceSensitiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetSystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetSystemInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_FlushCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).FlushCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_FlushCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).FlushCache(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetOptionNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetOptionNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetOptionNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetOptionNames(ctx, req.(*GetNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetChildOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetChildOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetChildOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetChildOptions(ctx, req.(*OptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_SaveGeneralOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SGeneralOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).SaveGeneralOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_SaveGeneralOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).SaveGeneralOption(ctx, req.(*SGeneralOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_DeleteGeneralOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).DeleteGeneralOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_DeleteGeneralOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).DeleteGeneralOption(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_SubmitSystemLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitSystemLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).SubmitSystemLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_SubmitSystemLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).SubmitSystemLog(ctx, req.(*SubmitSystemLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_DeleteSystemLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSystemLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).DeleteSystemLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_DeleteSystemLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).DeleteSystemLog(ctx, req.(*DeleteSystemLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_QueryBanks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBanksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).QueryBanks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_QueryBanks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).QueryBanks(ctx, req.(*QueryBanksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetSmsSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSmsSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetSmsSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetSmsSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetSmsSetting(ctx, req.(*GetSmsSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_SaveSmsSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSmsProviderSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).SaveSmsSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_SaveSmsSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).SaveSmsSetting(ctx, req.(*SSmsProviderSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_CleanCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).CleanCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_CleanCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).CleanCache(ctx, req.(*CleanCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_SaveBoardHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardHookSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).SaveBoardHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_SaveBoardHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).SaveBoardHook(ctx, req.(*BoardHookSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_ResourceUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).ResourceUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_ResourceUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).ResourceUrl(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_RegisterApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSsoApp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).RegisterApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_RegisterApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).RegisterApp(ctx, req.(*SSsoApp))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetApp(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetAllSsoApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetAllSsoApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetAllSsoApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetAllSsoApp(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_UpdateSuperCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuperPassswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).UpdateSuperCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_UpdateSuperCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).UpdateSuperCredential(ctx, req.(*SuperPassswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetSyncLoginUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetSyncLoginUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetSyncLoginUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetSyncLoginUrl(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetDistrictNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetDistrictNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetDistrictNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetDistrictNames(ctx, req.(*GetNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetAreaString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetAreaString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetAreaString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetAreaString(ctx, req.(*AreaStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetChildDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistrictChildrenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetChildDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetChildDistrict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetChildDistrict(ctx, req.(*DistrictChildrenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_FindCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).FindCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_FindCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).FindCity(ctx, req.(*FindAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetStation(ctx, req.(*GetStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetMoAppConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetMoAppConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetMoAppConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetMoAppConf(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_SaveMoAppConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMobileAppConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).SaveMoAppConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_SaveMoAppConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).SaveMoAppConf(ctx, req.(*SMobileAppConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetWxApiConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetWxApiConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetWxApiConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetWxApiConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_SaveWxApiConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SWxApiConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).SaveWxApiConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_SaveWxApiConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).SaveWxApiConfig(ctx, req.(*SWxApiConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetPayPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetPayPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetPayPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetPayPlatform(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetGlobMchSaleConf__Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetGlobMchSaleConf_(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetGlobMchSaleConf__FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetGlobMchSaleConf_(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_SaveGlobMchSaleConf__Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SGlobMchSaleConf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).SaveGlobMchSaleConf_(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_SaveGlobMchSaleConf__FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).SaveGlobMchSaleConf_(ctx, req.(*SGlobMchSaleConf))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemService_ServiceDesc is the grpc.ServiceDesc for SystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SystemService",
	HandlerType: (*SystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckSensitive",
			Handler:    _SystemService_CheckSensitive_Handler,
		},
		{
			MethodName: "ReplaceSensitive",
			Handler:    _SystemService_ReplaceSensitive_Handler,
		},
		{
			MethodName: "GetSystemInfo",
			Handler:    _SystemService_GetSystemInfo_Handler,
		},
		{
			MethodName: "FlushCache",
			Handler:    _SystemService_FlushCache_Handler,
		},
		{
			MethodName: "GetOptionNames",
			Handler:    _SystemService_GetOptionNames_Handler,
		},
		{
			MethodName: "GetChildOptions",
			Handler:    _SystemService_GetChildOptions_Handler,
		},
		{
			MethodName: "SaveGeneralOption",
			Handler:    _SystemService_SaveGeneralOption_Handler,
		},
		{
			MethodName: "DeleteGeneralOption",
			Handler:    _SystemService_DeleteGeneralOption_Handler,
		},
		{
			MethodName: "SubmitSystemLog",
			Handler:    _SystemService_SubmitSystemLog_Handler,
		},
		{
			MethodName: "DeleteSystemLog",
			Handler:    _SystemService_DeleteSystemLog_Handler,
		},
		{
			MethodName: "QueryBanks",
			Handler:    _SystemService_QueryBanks_Handler,
		},
		{
			MethodName: "GetSmsSetting",
			Handler:    _SystemService_GetSmsSetting_Handler,
		},
		{
			MethodName: "SaveSmsSetting",
			Handler:    _SystemService_SaveSmsSetting_Handler,
		},
		{
			MethodName: "CleanCache",
			Handler:    _SystemService_CleanCache_Handler,
		},
		{
			MethodName: "SaveBoardHook",
			Handler:    _SystemService_SaveBoardHook_Handler,
		},
		{
			MethodName: "ResourceUrl",
			Handler:    _SystemService_ResourceUrl_Handler,
		},
		{
			MethodName: "RegisterApp",
			Handler:    _SystemService_RegisterApp_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _SystemService_GetApp_Handler,
		},
		{
			MethodName: "GetAllSsoApp",
			Handler:    _SystemService_GetAllSsoApp_Handler,
		},
		{
			MethodName: "updateSuperCredential",
			Handler:    _SystemService_UpdateSuperCredential_Handler,
		},
		{
			MethodName: "GetSyncLoginUrl",
			Handler:    _SystemService_GetSyncLoginUrl_Handler,
		},
		{
			MethodName: "GetDistrictNames",
			Handler:    _SystemService_GetDistrictNames_Handler,
		},
		{
			MethodName: "GetAreaString",
			Handler:    _SystemService_GetAreaString_Handler,
		},
		{
			MethodName: "GetChildDistrict",
			Handler:    _SystemService_GetChildDistrict_Handler,
		},
		{
			MethodName: "FindCity",
			Handler:    _SystemService_FindCity_Handler,
		},
		{
			MethodName: "GetStation",
			Handler:    _SystemService_GetStation_Handler,
		},
		{
			MethodName: "GetMoAppConf",
			Handler:    _SystemService_GetMoAppConf_Handler,
		},
		{
			MethodName: "SaveMoAppConf",
			Handler:    _SystemService_SaveMoAppConf_Handler,
		},
		{
			MethodName: "GetWxApiConfig",
			Handler:    _SystemService_GetWxApiConfig_Handler,
		},
		{
			MethodName: "SaveWxApiConfig",
			Handler:    _SystemService_SaveWxApiConfig_Handler,
		},
		{
			MethodName: "GetPayPlatform",
			Handler:    _SystemService_GetPayPlatform_Handler,
		},
		{
			MethodName: "GetGlobMchSaleConf_",
			Handler:    _SystemService_GetGlobMchSaleConf__Handler,
		},
		{
			MethodName: "SaveGlobMchSaleConf_",
			Handler:    _SystemService_SaveGlobMchSaleConf__Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system_service.proto",
}
