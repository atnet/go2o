// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v5.29.2
// source: quick_pay_service.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 银行卡号
type BankCardNo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardNo string `protobuf:"bytes,1,opt,name=cardNo,proto3" json:"cardNo"`
}

func (x *BankCardNo) Reset() {
	*x = BankCardNo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_pay_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankCardNo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankCardNo) ProtoMessage() {}

func (x *BankCardNo) ProtoReflect() protoreflect.Message {
	mi := &file_quick_pay_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankCardNo.ProtoReflect.Descriptor instead.
func (*BankCardNo) Descriptor() ([]byte, []int) {
	return file_quick_pay_service_proto_rawDescGZIP(), []int{0}
}

func (x *BankCardNo) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

// 银行卡查询结果
type CardBinQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 错误信息
	ErrMsg string `protobuf:"bytes,1,opt,name=errMsg,proto3" json:"errMsg"`
	// 银行名称
	BankName string `protobuf:"bytes,2,opt,name=bankName,proto3" json:"bankName"`
	// 用户银行卡号
	BankCardNo string `protobuf:"bytes,3,opt,name=bankCardNo,proto3" json:"bankCardNo"`
	// 返回的银行代号
	BankCode string `protobuf:"bytes,4,opt,name=bankCode,proto3" json:"bankCode"`
	// 银行卡类型（0=储蓄卡,1=信用卡）
	CardType int32 `protobuf:"varint,5,opt,name=cardType,proto3" json:"cardType"`
	// 是否需要银行端授权,如果否,则直接使用短信既可授权
	RequireBankSideAuth bool `protobuf:"varint,6,opt,name=requireBankSideAuth,proto3" json:"requireBankSideAuth"`
}

func (x *CardBinQueryResponse) Reset() {
	*x = CardBinQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_pay_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardBinQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardBinQueryResponse) ProtoMessage() {}

func (x *CardBinQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quick_pay_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardBinQueryResponse.ProtoReflect.Descriptor instead.
func (*CardBinQueryResponse) Descriptor() ([]byte, []int) {
	return file_quick_pay_service_proto_rawDescGZIP(), []int{1}
}

func (x *CardBinQueryResponse) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *CardBinQueryResponse) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *CardBinQueryResponse) GetBankCardNo() string {
	if x != nil {
		return x.BankCardNo
	}
	return ""
}

func (x *CardBinQueryResponse) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *CardBinQueryResponse) GetCardType() int32 {
	if x != nil {
		return x.CardType
	}
	return 0
}

func (x *CardBinQueryResponse) GetRequireBankSideAuth() bool {
	if x != nil {
		return x.RequireBankSideAuth
	}
	return false
}

type BankAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 随机Id,用于查询授权结果,并防止重复提起申请
	NonceId string `protobuf:"bytes,1,opt,name=nonceId,proto3" json:"nonceId"`
	// 用户银行卡号,如：620000000000000000
	BankCardNo string `protobuf:"bytes,2,opt,name=bankCardNo,proto3" json:"bankCardNo"`
	// 姓名,如：张三
	BankAccountName string `protobuf:"bytes,3,opt,name=bankAccountName,proto3" json:"bankAccountName"`
	// 用户银行绑定的手机号
	Mobile string `protobuf:"bytes,4,opt,name=mobile,proto3" json:"mobile"`
	// 用户身份证号码,如：100100052000000000
	IdCardNo string `protobuf:"bytes,5,opt,name=idCardNo,proto3" json:"idCardNo"`
}

func (x *BankAuthRequest) Reset() {
	*x = BankAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_pay_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankAuthRequest) ProtoMessage() {}

func (x *BankAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quick_pay_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankAuthRequest.ProtoReflect.Descriptor instead.
func (*BankAuthRequest) Descriptor() ([]byte, []int) {
	return file_quick_pay_service_proto_rawDescGZIP(), []int{2}
}

func (x *BankAuthRequest) GetNonceId() string {
	if x != nil {
		return x.NonceId
	}
	return ""
}

func (x *BankAuthRequest) GetBankCardNo() string {
	if x != nil {
		return x.BankCardNo
	}
	return ""
}

func (x *BankAuthRequest) GetBankAccountName() string {
	if x != nil {
		return x.BankAccountName
	}
	return ""
}

func (x *BankAuthRequest) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *BankAuthRequest) GetIdCardNo() string {
	if x != nil {
		return x.IdCardNo
	}
	return ""
}

// 申请认证返回结果,通常直接使用返回的表单提交获取银行的授权, 并再查询授权
type BankAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 随机Id
	NonceId string `protobuf:"bytes,1,opt,name=nonceId,proto3" json:"nonceId"`
	// 错误消息
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg"`
	// 认证的Form表单
	AuthForm string `protobuf:"bytes,3,opt,name=authForm,proto3" json:"authForm"`
	// 认证需要的其他数据
	AuthData map[string]string `protobuf:"bytes,4,rep,name=authData,proto3" json:"authData" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BankAuthResponse) Reset() {
	*x = BankAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_pay_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankAuthResponse) ProtoMessage() {}

func (x *BankAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quick_pay_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankAuthResponse.ProtoReflect.Descriptor instead.
func (*BankAuthResponse) Descriptor() ([]byte, []int) {
	return file_quick_pay_service_proto_rawDescGZIP(), []int{3}
}

func (x *BankAuthResponse) GetNonceId() string {
	if x != nil {
		return x.NonceId
	}
	return ""
}

func (x *BankAuthResponse) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *BankAuthResponse) GetAuthForm() string {
	if x != nil {
		return x.AuthForm
	}
	return ""
}

func (x *BankAuthResponse) GetAuthData() map[string]string {
	if x != nil {
		return x.AuthData
	}
	return nil
}

// 银行授权查询请求
type BankAuthQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 申请认证的随机Id,如果传递空,则必须传入BankCardNo
	NonceId string `protobuf:"bytes,1,opt,name=nonceId,proto3" json:"nonceId"`
	// 用户银行卡号,如：620000000000000000
	BankCardNo string `protobuf:"bytes,2,opt,name=bankCardNo,proto3" json:"bankCardNo"`
}

func (x *BankAuthQueryRequest) Reset() {
	*x = BankAuthQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_pay_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankAuthQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankAuthQueryRequest) ProtoMessage() {}

func (x *BankAuthQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quick_pay_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankAuthQueryRequest.ProtoReflect.Descriptor instead.
func (*BankAuthQueryRequest) Descriptor() ([]byte, []int) {
	return file_quick_pay_service_proto_rawDescGZIP(), []int{4}
}

func (x *BankAuthQueryRequest) GetNonceId() string {
	if x != nil {
		return x.NonceId
	}
	return ""
}

func (x *BankAuthQueryRequest) GetBankCardNo() string {
	if x != nil {
		return x.BankCardNo
	}
	return ""
}

// 银行授权查询响应
type BankAuthQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 状态码，0表示成功,1: 表示处理中 2:处理失败
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// 错误信息,成功返回空
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg"`
	// 银行授权认证返回的Token,未处理授权时为空
	BankAuthToken string `protobuf:"bytes,3,opt,name=bankAuthToken,proto3" json:"bankAuthToken"`
}

func (x *BankAuthQueryResponse) Reset() {
	*x = BankAuthQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_pay_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankAuthQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankAuthQueryResponse) ProtoMessage() {}

func (x *BankAuthQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quick_pay_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankAuthQueryResponse.ProtoReflect.Descriptor instead.
func (*BankAuthQueryResponse) Descriptor() ([]byte, []int) {
	return file_quick_pay_service_proto_rawDescGZIP(), []int{5}
}

func (x *BankAuthQueryResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BankAuthQueryResponse) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *BankAuthQueryResponse) GetBankAuthToken() string {
	if x != nil {
		return x.BankAuthToken
	}
	return ""
}

// 直接支付请求
type QPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 商户订单号
	OrderNo string `protobuf:"bytes,1,opt,name=orderNo,proto3" json:"orderNo"`
	// 支付金额,实际金额*100,无小数
	TransactionFee int32 `protobuf:"varint,2,opt,name=transactionFee,proto3" json:"transactionFee"`
	// 支付商品名称
	Subject string `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject"`
	// 银行授权码
	BankAuthToken string `protobuf:"bytes,4,opt,name=bankAuthToken,proto3" json:"bankAuthToken"`
	// 交易用户IP
	TradeUserIp string `protobuf:"bytes,5,opt,name=tradeUserIp,proto3" json:"tradeUserIp"`
	// 异步通知地址,非必填
	NotifyUrl string `protobuf:"bytes,6,opt,name=notifyUrl,proto3" json:"notifyUrl"`
	// 同步返回地址,非必填
	ReturnUrl string `protobuf:"bytes,7,opt,name=returnUrl,proto3" json:"returnUrl"`
	// 自定义数据
	Nonce string `protobuf:"bytes,8,opt,name=nonce,proto3" json:"nonce"`
	// 安全码+随机内容md5后的字符串
	SafeSign string `protobuf:"bytes,9,opt,name=safeSign,proto3" json:"safeSign"`
}

func (x *QPaymentRequest) Reset() {
	*x = QPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_pay_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QPaymentRequest) ProtoMessage() {}

func (x *QPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quick_pay_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QPaymentRequest.ProtoReflect.Descriptor instead.
func (*QPaymentRequest) Descriptor() ([]byte, []int) {
	return file_quick_pay_service_proto_rawDescGZIP(), []int{6}
}

func (x *QPaymentRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *QPaymentRequest) GetTransactionFee() int32 {
	if x != nil {
		return x.TransactionFee
	}
	return 0
}

func (x *QPaymentRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *QPaymentRequest) GetBankAuthToken() string {
	if x != nil {
		return x.BankAuthToken
	}
	return ""
}

func (x *QPaymentRequest) GetTradeUserIp() string {
	if x != nil {
		return x.TradeUserIp
	}
	return ""
}

func (x *QPaymentRequest) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *QPaymentRequest) GetReturnUrl() string {
	if x != nil {
		return x.ReturnUrl
	}
	return ""
}

func (x *QPaymentRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *QPaymentRequest) GetSafeSign() string {
	if x != nil {
		return x.SafeSign
	}
	return ""
}

// 支付申请响应
type QPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 状态码，0表示成功
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
	// 错误信息,成功返回空
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg"`
	// 随机ID
	NonceId string `protobuf:"bytes,8,opt,name=nonceId,proto3" json:"nonceId"`
	// 第三方支单据号
	BillNo string `protobuf:"bytes,3,opt,name=billNo,proto3" json:"billNo"`
}

func (x *QPaymentResponse) Reset() {
	*x = QPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_pay_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QPaymentResponse) ProtoMessage() {}

func (x *QPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quick_pay_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QPaymentResponse.ProtoReflect.Descriptor instead.
func (*QPaymentResponse) Descriptor() ([]byte, []int) {
	return file_quick_pay_service_proto_rawDescGZIP(), []int{7}
}

func (x *QPaymentResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *QPaymentResponse) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *QPaymentResponse) GetNonceId() string {
	if x != nil {
		return x.NonceId
	}
	return ""
}

func (x *QPaymentResponse) GetBillNo() string {
	if x != nil {
		return x.BillNo
	}
	return ""
}

// 查询支付结果请求
type QPaymentQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 商户订单号
	OrderNo string `protobuf:"bytes,1,opt,name=orderNo,proto3" json:"orderNo"`
	// 查询需要的其他参数(可选)
	Options map[string]string `protobuf:"bytes,3,rep,name=options,proto3" json:"options" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QPaymentQueryRequest) Reset() {
	*x = QPaymentQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_pay_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QPaymentQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QPaymentQueryRequest) ProtoMessage() {}

func (x *QPaymentQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quick_pay_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QPaymentQueryRequest.ProtoReflect.Descriptor instead.
func (*QPaymentQueryRequest) Descriptor() ([]byte, []int) {
	return file_quick_pay_service_proto_rawDescGZIP(), []int{8}
}

func (x *QPaymentQueryRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *QPaymentQueryRequest) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

// 查询支付结果响应
type QPaymentQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 状态码，0表示成功
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// 错误信息,成功返回空
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg"`
	// 第三方支单据号
	BillNo string `protobuf:"bytes,3,opt,name=billNo,proto3" json:"billNo"`
}

func (x *QPaymentQueryResponse) Reset() {
	*x = QPaymentQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_pay_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QPaymentQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QPaymentQueryResponse) ProtoMessage() {}

func (x *QPaymentQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quick_pay_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QPaymentQueryResponse.ProtoReflect.Descriptor instead.
func (*QPaymentQueryResponse) Descriptor() ([]byte, []int) {
	return file_quick_pay_service_proto_rawDescGZIP(), []int{9}
}

func (x *QPaymentQueryResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QPaymentQueryResponse) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *QPaymentQueryResponse) GetBillNo() string {
	if x != nil {
		return x.BillNo
	}
	return ""
}

// 检查签名请求
type CheckQPaySignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 签名类型
	SignType string `protobuf:"bytes,1,opt,name=signType,proto3" json:"signType"`
	// 签名
	Sign string `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign"`
	// 参数
	Params map[string]string `protobuf:"bytes,3,rep,name=params,proto3" json:"params" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CheckQPaySignRequest) Reset() {
	*x = CheckQPaySignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_pay_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQPaySignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQPaySignRequest) ProtoMessage() {}

func (x *CheckQPaySignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quick_pay_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQPaySignRequest.ProtoReflect.Descriptor instead.
func (*CheckQPaySignRequest) Descriptor() ([]byte, []int) {
	return file_quick_pay_service_proto_rawDescGZIP(), []int{10}
}

func (x *CheckQPaySignRequest) GetSignType() string {
	if x != nil {
		return x.SignType
	}
	return ""
}

func (x *CheckQPaySignRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *CheckQPaySignRequest) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// 检查签名响应
type CheckQPaySignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignOk bool `protobuf:"varint,1,opt,name=signOk,proto3" json:"signOk"`
}

func (x *CheckQPaySignResponse) Reset() {
	*x = CheckQPaySignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_pay_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQPaySignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQPaySignResponse) ProtoMessage() {}

func (x *CheckQPaySignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quick_pay_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQPaySignResponse.ProtoReflect.Descriptor instead.
func (*CheckQPaySignResponse) Descriptor() ([]byte, []int) {
	return file_quick_pay_service_proto_rawDescGZIP(), []int{11}
}

func (x *CheckQPaySignResponse) GetSignOk() bool {
	if x != nil {
		return x.SignOk
	}
	return false
}

// 付款请求
type CardTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 商户订单号
	OrderNo string `protobuf:"bytes,1,opt,name=orderNo,proto3" json:"orderNo"`
	// 银行编号
	BankCode string `protobuf:"bytes,2,opt,name=bankCode,proto3" json:"bankCode"`
	// 是否为对私转账
	PersonTransfer bool `protobuf:"varint,3,opt,name=personTransfer,proto3" json:"personTransfer"`
	// 付款金额,实际金额*100,无小数
	TransactionFee int32 `protobuf:"varint,4,opt,name=transactionFee,proto3" json:"transactionFee"`
	// 银行账户
	BankCardNo string `protobuf:"bytes,5,opt,name=bankCardNo,proto3" json:"bankCardNo"`
	// 收款人姓名,如：张三
	BankAccountName string `protobuf:"bytes,6,opt,name=bankAccountName,proto3" json:"bankAccountName"`
	// 付款事由
	Subject string `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject"`
	// 省份
	Province string `protobuf:"bytes,8,opt,name=province,proto3" json:"province"`
	// 城市
	City string `protobuf:"bytes,9,opt,name=city,proto3" json:"city"`
	// 支行信息
	StoreName string `protobuf:"bytes,10,opt,name=storeName,proto3" json:"storeName"`
}

func (x *CardTransferRequest) Reset() {
	*x = CardTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_pay_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardTransferRequest) ProtoMessage() {}

func (x *CardTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quick_pay_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardTransferRequest.ProtoReflect.Descriptor instead.
func (*CardTransferRequest) Descriptor() ([]byte, []int) {
	return file_quick_pay_service_proto_rawDescGZIP(), []int{12}
}

func (x *CardTransferRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *CardTransferRequest) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *CardTransferRequest) GetPersonTransfer() bool {
	if x != nil {
		return x.PersonTransfer
	}
	return false
}

func (x *CardTransferRequest) GetTransactionFee() int32 {
	if x != nil {
		return x.TransactionFee
	}
	return 0
}

func (x *CardTransferRequest) GetBankCardNo() string {
	if x != nil {
		return x.BankCardNo
	}
	return ""
}

func (x *CardTransferRequest) GetBankAccountName() string {
	if x != nil {
		return x.BankAccountName
	}
	return ""
}

func (x *CardTransferRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CardTransferRequest) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CardTransferRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CardTransferRequest) GetStoreName() string {
	if x != nil {
		return x.StoreName
	}
	return ""
}

// 批量付款请求
type BatchTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 批量付款订单号（要保证唯一）,最大长度50个字符，最小长度10个字符
	BatchTradeNo string `protobuf:"bytes,1,opt,name=batchTradeNo,proto3" json:"batchTradeNo"`
	// 付款总金额,实际金额*100,无小数
	BatchTradeFee int32 `protobuf:"varint,2,opt,name=batchTradeFee,proto3" json:"batchTradeFee"`
	// 交易用户IP
	TradeUserIp string `protobuf:"bytes,3,opt,name=tradeUserIp,proto3" json:"tradeUserIp"`
	// 批量付款记录
	BatchList []*CardTransferRequest `protobuf:"bytes,4,rep,name=batchList,proto3" json:"batchList"`
	// 异步通知地址,非必填
	NotifyUrl string `protobuf:"bytes,5,opt,name=notifyUrl,proto3" json:"notifyUrl"`
	// 自定义数据
	Nonce string `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce"`
	// 安全码+随机内容md5后的字符串
	SafeSign string `protobuf:"bytes,7,opt,name=safeSign,proto3" json:"safeSign"`
}

func (x *BatchTransferRequest) Reset() {
	*x = BatchTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_pay_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTransferRequest) ProtoMessage() {}

func (x *BatchTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quick_pay_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTransferRequest.ProtoReflect.Descriptor instead.
func (*BatchTransferRequest) Descriptor() ([]byte, []int) {
	return file_quick_pay_service_proto_rawDescGZIP(), []int{13}
}

func (x *BatchTransferRequest) GetBatchTradeNo() string {
	if x != nil {
		return x.BatchTradeNo
	}
	return ""
}

func (x *BatchTransferRequest) GetBatchTradeFee() int32 {
	if x != nil {
		return x.BatchTradeFee
	}
	return 0
}

func (x *BatchTransferRequest) GetTradeUserIp() string {
	if x != nil {
		return x.TradeUserIp
	}
	return ""
}

func (x *BatchTransferRequest) GetBatchList() []*CardTransferRequest {
	if x != nil {
		return x.BatchList
	}
	return nil
}

func (x *BatchTransferRequest) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *BatchTransferRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *BatchTransferRequest) GetSafeSign() string {
	if x != nil {
		return x.SafeSign
	}
	return ""
}

// 批量付款响应
type BatchTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 状态码，0表示成功
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
	// 错误信息,成功返回空
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg"`
	// 随机ID
	NonceId string `protobuf:"bytes,3,opt,name=nonceId,proto3" json:"nonceId"`
}

func (x *BatchTransferResponse) Reset() {
	*x = BatchTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quick_pay_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTransferResponse) ProtoMessage() {}

func (x *BatchTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quick_pay_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTransferResponse.ProtoReflect.Descriptor instead.
func (*BatchTransferResponse) Descriptor() ([]byte, []int) {
	return file_quick_pay_service_proto_rawDescGZIP(), []int{14}
}

func (x *BatchTransferResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BatchTransferResponse) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *BatchTransferResponse) GetNonceId() string {
	if x != nil {
		return x.NonceId
	}
	return ""
}

var File_quick_pay_service_proto protoreflect.FileDescriptor

var file_quick_pay_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x24, 0x0a, 0x0a, 0x42, 0x61, 0x6e,
	0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x22,
	0xd4, 0x01, 0x0a, 0x14, 0x43, 0x61, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d,
	0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x41, 0x75, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x69,
	0x64, 0x65, 0x41, 0x75, 0x74, 0x68, 0x22, 0xa9, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x6f, 0x22, 0xda, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x50, 0x0a, 0x14, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x6f, 0x22, 0x69, 0x0a, 0x15, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x61, 0x6e, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa3, 0x02, 0x0a,
	0x0f, 0x51, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x62, 0x61, 0x6e, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55,
	0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x55, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x66, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x66, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x22, 0x70, 0x0a, 0x10, 0x51, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69,
	0x6c, 0x6c, 0x4e, 0x6f, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x51, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x51, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x5b, 0x0a, 0x15, 0x51, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6c, 0x6c, 0x4e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x22, 0xbc,
	0x01, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x50, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51,
	0x50, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a,
	0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x50, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x6b, 0x22, 0xcd,
	0x02, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x0f,
	0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x86,
	0x02, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x65,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x61, 0x66, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x61, 0x66, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x22, 0x5d, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x32, 0xcc, 0x03, 0x0a, 0x0f, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x50, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x61, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x12, 0x0b, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x1a, 0x15, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x42, 0x69,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x15, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x50, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x50, 0x61, 0x79,
	0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x69, 0x64,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x10, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x13,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x15, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x75, 0x74, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x51, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x51, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x12,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x15, 0x2e, 0x51, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x51, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x67, 0x6f, 0x32, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x5a, 0x08, 0x2e, 0x2f,
	0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_quick_pay_service_proto_rawDescOnce sync.Once
	file_quick_pay_service_proto_rawDescData = file_quick_pay_service_proto_rawDesc
)

func file_quick_pay_service_proto_rawDescGZIP() []byte {
	file_quick_pay_service_proto_rawDescOnce.Do(func() {
		file_quick_pay_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_quick_pay_service_proto_rawDescData)
	})
	return file_quick_pay_service_proto_rawDescData
}

var file_quick_pay_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_quick_pay_service_proto_goTypes = []interface{}{
	(*BankCardNo)(nil),            // 0: BankCardNo
	(*CardBinQueryResponse)(nil),  // 1: CardBinQueryResponse
	(*BankAuthRequest)(nil),       // 2: BankAuthRequest
	(*BankAuthResponse)(nil),      // 3: BankAuthResponse
	(*BankAuthQueryRequest)(nil),  // 4: BankAuthQueryRequest
	(*BankAuthQueryResponse)(nil), // 5: BankAuthQueryResponse
	(*QPaymentRequest)(nil),       // 6: QPaymentRequest
	(*QPaymentResponse)(nil),      // 7: QPaymentResponse
	(*QPaymentQueryRequest)(nil),  // 8: QPaymentQueryRequest
	(*QPaymentQueryResponse)(nil), // 9: QPaymentQueryResponse
	(*CheckQPaySignRequest)(nil),  // 10: CheckQPaySignRequest
	(*CheckQPaySignResponse)(nil), // 11: CheckQPaySignResponse
	(*CardTransferRequest)(nil),   // 12: CardTransferRequest
	(*BatchTransferRequest)(nil),  // 13: BatchTransferRequest
	(*BatchTransferResponse)(nil), // 14: BatchTransferResponse
	nil,                           // 15: BankAuthResponse.AuthDataEntry
	nil,                           // 16: QPaymentQueryRequest.OptionsEntry
	nil,                           // 17: CheckQPaySignRequest.ParamsEntry
}
var file_quick_pay_service_proto_depIdxs = []int32{
	15, // 0: BankAuthResponse.authData:type_name -> BankAuthResponse.AuthDataEntry
	16, // 1: QPaymentQueryRequest.options:type_name -> QPaymentQueryRequest.OptionsEntry
	17, // 2: CheckQPaySignRequest.params:type_name -> CheckQPaySignRequest.ParamsEntry
	12, // 3: BatchTransferRequest.batchList:type_name -> CardTransferRequest
	0,  // 4: QuickPayService.QueryCardBin:input_type -> BankCardNo
	10, // 5: QuickPayService.CheckSign:input_type -> CheckQPaySignRequest
	2,  // 6: QuickPayService.RequestBankSideAuth:input_type -> BankAuthRequest
	4,  // 7: QuickPayService.QueryBankAuthResult:input_type -> BankAuthQueryRequest
	6,  // 8: QuickPayService.DirectPayment:input_type -> QPaymentRequest
	8,  // 9: QuickPayService.QueryPaymentStatus:input_type -> QPaymentQueryRequest
	13, // 10: QuickPayService.BatchTransfer:input_type -> BatchTransferRequest
	1,  // 11: QuickPayService.QueryCardBin:output_type -> CardBinQueryResponse
	11, // 12: QuickPayService.CheckSign:output_type -> CheckQPaySignResponse
	3,  // 13: QuickPayService.RequestBankSideAuth:output_type -> BankAuthResponse
	5,  // 14: QuickPayService.QueryBankAuthResult:output_type -> BankAuthQueryResponse
	7,  // 15: QuickPayService.DirectPayment:output_type -> QPaymentResponse
	9,  // 16: QuickPayService.QueryPaymentStatus:output_type -> QPaymentQueryResponse
	14, // 17: QuickPayService.BatchTransfer:output_type -> BatchTransferResponse
	11, // [11:18] is the sub-list for method output_type
	4,  // [4:11] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_quick_pay_service_proto_init() }
func file_quick_pay_service_proto_init() {
	if File_quick_pay_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_quick_pay_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankCardNo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_pay_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardBinQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_pay_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_pay_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_pay_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankAuthQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_pay_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankAuthQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_pay_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_pay_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_pay_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QPaymentQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_pay_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QPaymentQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_pay_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckQPaySignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_pay_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckQPaySignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_pay_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_pay_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quick_pay_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_quick_pay_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_quick_pay_service_proto_goTypes,
		DependencyIndexes: file_quick_pay_service_proto_depIdxs,
		MessageInfos:      file_quick_pay_service_proto_msgTypes,
	}.Build()
	File_quick_pay_service_proto = out.File
	file_quick_pay_service_proto_rawDesc = nil
	file_quick_pay_service_proto_goTypes = nil
	file_quick_pay_service_proto_depIdxs = nil
}
