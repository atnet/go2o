// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: payment_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentService_SubmitPaymentOrder_FullMethodName     = "/PaymentService/SubmitPaymentOrder"
	PaymentService_GetPaymentOrder_FullMethodName        = "/PaymentService/GetPaymentOrder"
	PaymentService_AdjustOrder_FullMethodName            = "/PaymentService/AdjustOrder"
	PaymentService_DiscountByBalance_FullMethodName      = "/PaymentService/DiscountByBalance"
	PaymentService_DiscountByIntegral_FullMethodName     = "/PaymentService/DiscountByIntegral"
	PaymentService_PaymentByWallet_FullMethodName        = "/PaymentService/PaymentByWallet"
	PaymentService_HybridPayment_FullMethodName          = "/PaymentService/HybridPayment"
	PaymentService_FinishPayment_FullMethodName          = "/PaymentService/FinishPayment"
	PaymentService_QueryDivideOrders_FullMethodName      = "/PaymentService/QueryDivideOrders"
	PaymentService_Divide_FullMethodName                 = "/PaymentService/Divide"
	PaymentService_CompleteDivide_FullMethodName         = "/PaymentService/CompleteDivide"
	PaymentService_UpdateDivideStatus_FullMethodName     = "/PaymentService/UpdateDivideStatus"
	PaymentService_RevertSubDivide_FullMethodName        = "/PaymentService/RevertSubDivide"
	PaymentService_DivideSuccess_FullMethodName          = "/PaymentService/DivideSuccess"
	PaymentService_GetSubMerchant_FullMethodName         = "/PaymentService/GetSubMerchant"
	PaymentService_InitialSubMerchant_FullMethodName     = "/PaymentService/InitialSubMerchant"
	PaymentService_StageSubMerchant_FullMethodName       = "/PaymentService/StageSubMerchant"
	PaymentService_SubmitSubMerchant_FullMethodName      = "/PaymentService/SubmitSubMerchant"
	PaymentService_UpdateSubMerchant_FullMethodName      = "/PaymentService/UpdateSubMerchant"
	PaymentService_QueryRefundableOrders_FullMethodName  = "/PaymentService/QueryRefundableOrders"
	PaymentService_RequestRefund_FullMethodName          = "/PaymentService/RequestRefund"
	PaymentService_RequestRefundAvail_FullMethodName     = "/PaymentService/RequestRefundAvail"
	PaymentService_SupplementRefund_FullMethodName       = "/PaymentService/SupplementRefund"
	PaymentService_GatewayV1_FullMethodName              = "/PaymentService/GatewayV1"
	PaymentService_GetPreparePaymentInfo_FullMethodName  = "/PaymentService/GetPreparePaymentInfo"
	PaymentService_GatewayV2_FullMethodName              = "/PaymentService/GatewayV2"
	PaymentService_MixedPayment_FullMethodName           = "/PaymentService/MixedPayment"
	PaymentService_SaveIntegrateApp_FullMethodName       = "/PaymentService/SaveIntegrateApp"
	PaymentService_QueryIntegrateAppList_FullMethodName  = "/PaymentService/QueryIntegrateAppList"
	PaymentService_PrepareIntegrateParams_FullMethodName = "/PaymentService/PrepareIntegrateParams"
	PaymentService_DeleteIntegrateApp_FullMethodName     = "/PaymentService/DeleteIntegrateApp"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 支付服务
type PaymentServiceClient interface {
	// 创建支付单并提交
	SubmitPaymentOrder(ctx context.Context, in *SPaymentOrder, opts ...grpc.CallOption) (*TxResult, error)
	// 根据支付单号或订单号获取支付单
	GetPaymentOrder(ctx context.Context, in *PaymentOrderRequest, opts ...grpc.CallOption) (*SPaymentOrder, error)
	// 调整支付单金额
	AdjustOrder(ctx context.Context, in *AdjustOrderRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 余额抵扣
	DiscountByBalance(ctx context.Context, in *DiscountBalanceRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 积分抵扣支付单
	DiscountByIntegral(ctx context.Context, in *DiscountIntegralRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 钱包账户支付
	PaymentByWallet(ctx context.Context, in *WalletPaymentRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 余额钱包混合支付，优先扣除余额。
	HybridPayment(ctx context.Context, in *HyperPaymentRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 完成支付单支付，并传入支付方式及外部订单号
	FinishPayment(ctx context.Context, in *FinishPaymentRequest, opts ...grpc.CallOption) (*TxResult, error)
	// QueryDivideOrders 查询可用于分账的订单
	QueryDivideOrders(ctx context.Context, in *DivideOrdersRequest, opts ...grpc.CallOption) (*DivideOrdersResponse, error)
	// Divide 分账
	Divide(ctx context.Context, in *PaymentDivideRequest, opts ...grpc.CallOption) (*TxResult, error)
	// FinishDive 完成分账
	CompleteDivide(ctx context.Context, in *PaymentOrderRequest, opts ...grpc.CallOption) (*TxResult, error)
	// UpdateDivideStatus 更新分账状态
	UpdateDivideStatus(ctx context.Context, in *UpdateDivideStatusRequest, opts ...grpc.CallOption) (*TxResult, error)
	// RevertSubDivide 撤销分账
	RevertSubDivide(ctx context.Context, in *PaymentSubDivideRevertRequest, opts ...grpc.CallOption) (*TxResult, error)
	// DivideSuccess 分账成功
	DivideSuccess(ctx context.Context, in *PaymentDivideSuccessRequest, opts ...grpc.CallOption) (*TxResult, error)
	// GetSubMerchant 获取商户入网信息
	GetSubMerchant(ctx context.Context, in *SubMerchantCodeRequest, opts ...grpc.CallOption) (*SSubMerchant, error)
	// InitialSubMerchant 初始化商户入网信息
	InitialSubMerchant(ctx context.Context, in *SubMerchantInitialRequest, opts ...grpc.CallOption) (*TxResult, error)
	// StageSubMerchant 暂存商户入网信息
	StageSubMerchant(ctx context.Context, in *SSubMerchant, opts ...grpc.CallOption) (*TxResult, error)
	// SubmitSubMerchant 提交商户入网信息
	SubmitSubMerchant(ctx context.Context, in *SubMerchantCodeRequest, opts ...grpc.CallOption) (*TxResult, error)
	// UpdateSubMerchant 更新商户入网信息
	UpdateSubMerchant(ctx context.Context, in *SubMerchantUpdateRequest, opts ...grpc.CallOption) (*TxResult, error)
	// QueryRefundableOrders 查询可退款的充值订单
	QueryRefundableOrders(ctx context.Context, in *QueryRefundablePaymentOrdersRequest, opts ...grpc.CallOption) (*RefundablePaymentOrdersResponse, error)
	// RequestRefund 申请退款(仅支持订单以外的支付单，如：充值等，订单请通过售后方式退款)
	RequestRefund(ctx context.Context, in *PaymentRefundRequest, opts ...grpc.CallOption) (*TxResult, error)
	// RequestRefundAvail 申请退款(全部可退金额)，常用于充值退款，或消费后再退回剩余金额
	// 注意: 该方法仅支持订单以外的支付单，如：充值等，订单请通过售后方式退款
	RequestRefundAvail(ctx context.Context, in *PaymentRefundAvailRequest, opts ...grpc.CallOption) (*PaymentRefundAvailResponse, error)
	// 补发退款(第三方支付),用于退款后补发,当退款未到账时，调用补发
	SupplementRefund(ctx context.Context, in *PaymentSupplementRefundRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 支付网关(仅交易单使用)
	GatewayV1(ctx context.Context, in *PayGatewayRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 获取支付预交易数据
	GetPreparePaymentInfo(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*SPrepareTradeData, error)
	// 支付网关V2
	GatewayV2(ctx context.Context, in *PayGatewayV2Request, opts ...grpc.CallOption) (*PayGatewayResponse, error)
	// *
	// 支付单混合支付
	//
	// @param storeCode 店铺编号
	// @param tradeNo   交易号
	// @param Data  支付数据
	// @return 支付结果,返回:order_status
	MixedPayment(ctx context.Context, in *MixedPaymentRequest, opts ...grpc.CallOption) (*TxResult, error)
	// * 保存集成支付应用
	SaveIntegrateApp(ctx context.Context, in *SIntegrateApp, opts ...grpc.CallOption) (*TxResult, error)
	// * 获取集成支付应用列表
	QueryIntegrateAppList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QueryIntegrateAppResponse, error)
	// 准备集成支付的参数
	PrepareIntegrateParams(ctx context.Context, in *IntegrateParamsRequest, opts ...grpc.CallOption) (*IntegrateParamsResponse, error)
	// * 删除集成支付应用
	DeleteIntegrateApp(ctx context.Context, in *PayIntegrateAppId, opts ...grpc.CallOption) (*TxResult, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) SubmitPaymentOrder(ctx context.Context, in *SPaymentOrder, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_SubmitPaymentOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentOrder(ctx context.Context, in *PaymentOrderRequest, opts ...grpc.CallOption) (*SPaymentOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SPaymentOrder)
	err := c.cc.Invoke(ctx, PaymentService_GetPaymentOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) AdjustOrder(ctx context.Context, in *AdjustOrderRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_AdjustOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) DiscountByBalance(ctx context.Context, in *DiscountBalanceRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_DiscountByBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) DiscountByIntegral(ctx context.Context, in *DiscountIntegralRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_DiscountByIntegral_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) PaymentByWallet(ctx context.Context, in *WalletPaymentRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_PaymentByWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) HybridPayment(ctx context.Context, in *HyperPaymentRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_HybridPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) FinishPayment(ctx context.Context, in *FinishPaymentRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_FinishPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) QueryDivideOrders(ctx context.Context, in *DivideOrdersRequest, opts ...grpc.CallOption) (*DivideOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DivideOrdersResponse)
	err := c.cc.Invoke(ctx, PaymentService_QueryDivideOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Divide(ctx context.Context, in *PaymentDivideRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_Divide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CompleteDivide(ctx context.Context, in *PaymentOrderRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_CompleteDivide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) UpdateDivideStatus(ctx context.Context, in *UpdateDivideStatusRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_UpdateDivideStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RevertSubDivide(ctx context.Context, in *PaymentSubDivideRevertRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_RevertSubDivide_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) DivideSuccess(ctx context.Context, in *PaymentDivideSuccessRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_DivideSuccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetSubMerchant(ctx context.Context, in *SubMerchantCodeRequest, opts ...grpc.CallOption) (*SSubMerchant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SSubMerchant)
	err := c.cc.Invoke(ctx, PaymentService_GetSubMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) InitialSubMerchant(ctx context.Context, in *SubMerchantInitialRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_InitialSubMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) StageSubMerchant(ctx context.Context, in *SSubMerchant, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_StageSubMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) SubmitSubMerchant(ctx context.Context, in *SubMerchantCodeRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_SubmitSubMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) UpdateSubMerchant(ctx context.Context, in *SubMerchantUpdateRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_UpdateSubMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) QueryRefundableOrders(ctx context.Context, in *QueryRefundablePaymentOrdersRequest, opts ...grpc.CallOption) (*RefundablePaymentOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundablePaymentOrdersResponse)
	err := c.cc.Invoke(ctx, PaymentService_QueryRefundableOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RequestRefund(ctx context.Context, in *PaymentRefundRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_RequestRefund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RequestRefundAvail(ctx context.Context, in *PaymentRefundAvailRequest, opts ...grpc.CallOption) (*PaymentRefundAvailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentRefundAvailResponse)
	err := c.cc.Invoke(ctx, PaymentService_RequestRefundAvail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) SupplementRefund(ctx context.Context, in *PaymentSupplementRefundRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_SupplementRefund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GatewayV1(ctx context.Context, in *PayGatewayRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_GatewayV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPreparePaymentInfo(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*SPrepareTradeData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SPrepareTradeData)
	err := c.cc.Invoke(ctx, PaymentService_GetPreparePaymentInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GatewayV2(ctx context.Context, in *PayGatewayV2Request, opts ...grpc.CallOption) (*PayGatewayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayGatewayResponse)
	err := c.cc.Invoke(ctx, PaymentService_GatewayV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) MixedPayment(ctx context.Context, in *MixedPaymentRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_MixedPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) SaveIntegrateApp(ctx context.Context, in *SIntegrateApp, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_SaveIntegrateApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) QueryIntegrateAppList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QueryIntegrateAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryIntegrateAppResponse)
	err := c.cc.Invoke(ctx, PaymentService_QueryIntegrateAppList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) PrepareIntegrateParams(ctx context.Context, in *IntegrateParamsRequest, opts ...grpc.CallOption) (*IntegrateParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntegrateParamsResponse)
	err := c.cc.Invoke(ctx, PaymentService_PrepareIntegrateParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) DeleteIntegrateApp(ctx context.Context, in *PayIntegrateAppId, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, PaymentService_DeleteIntegrateApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility.
//
// 支付服务
type PaymentServiceServer interface {
	// 创建支付单并提交
	SubmitPaymentOrder(context.Context, *SPaymentOrder) (*TxResult, error)
	// 根据支付单号或订单号获取支付单
	GetPaymentOrder(context.Context, *PaymentOrderRequest) (*SPaymentOrder, error)
	// 调整支付单金额
	AdjustOrder(context.Context, *AdjustOrderRequest) (*TxResult, error)
	// 余额抵扣
	DiscountByBalance(context.Context, *DiscountBalanceRequest) (*TxResult, error)
	// 积分抵扣支付单
	DiscountByIntegral(context.Context, *DiscountIntegralRequest) (*TxResult, error)
	// 钱包账户支付
	PaymentByWallet(context.Context, *WalletPaymentRequest) (*TxResult, error)
	// 余额钱包混合支付，优先扣除余额。
	HybridPayment(context.Context, *HyperPaymentRequest) (*TxResult, error)
	// 完成支付单支付，并传入支付方式及外部订单号
	FinishPayment(context.Context, *FinishPaymentRequest) (*TxResult, error)
	// QueryDivideOrders 查询可用于分账的订单
	QueryDivideOrders(context.Context, *DivideOrdersRequest) (*DivideOrdersResponse, error)
	// Divide 分账
	Divide(context.Context, *PaymentDivideRequest) (*TxResult, error)
	// FinishDive 完成分账
	CompleteDivide(context.Context, *PaymentOrderRequest) (*TxResult, error)
	// UpdateDivideStatus 更新分账状态
	UpdateDivideStatus(context.Context, *UpdateDivideStatusRequest) (*TxResult, error)
	// RevertSubDivide 撤销分账
	RevertSubDivide(context.Context, *PaymentSubDivideRevertRequest) (*TxResult, error)
	// DivideSuccess 分账成功
	DivideSuccess(context.Context, *PaymentDivideSuccessRequest) (*TxResult, error)
	// GetSubMerchant 获取商户入网信息
	GetSubMerchant(context.Context, *SubMerchantCodeRequest) (*SSubMerchant, error)
	// InitialSubMerchant 初始化商户入网信息
	InitialSubMerchant(context.Context, *SubMerchantInitialRequest) (*TxResult, error)
	// StageSubMerchant 暂存商户入网信息
	StageSubMerchant(context.Context, *SSubMerchant) (*TxResult, error)
	// SubmitSubMerchant 提交商户入网信息
	SubmitSubMerchant(context.Context, *SubMerchantCodeRequest) (*TxResult, error)
	// UpdateSubMerchant 更新商户入网信息
	UpdateSubMerchant(context.Context, *SubMerchantUpdateRequest) (*TxResult, error)
	// QueryRefundableOrders 查询可退款的充值订单
	QueryRefundableOrders(context.Context, *QueryRefundablePaymentOrdersRequest) (*RefundablePaymentOrdersResponse, error)
	// RequestRefund 申请退款(仅支持订单以外的支付单，如：充值等，订单请通过售后方式退款)
	RequestRefund(context.Context, *PaymentRefundRequest) (*TxResult, error)
	// RequestRefundAvail 申请退款(全部可退金额)，常用于充值退款，或消费后再退回剩余金额
	// 注意: 该方法仅支持订单以外的支付单，如：充值等，订单请通过售后方式退款
	RequestRefundAvail(context.Context, *PaymentRefundAvailRequest) (*PaymentRefundAvailResponse, error)
	// 补发退款(第三方支付),用于退款后补发,当退款未到账时，调用补发
	SupplementRefund(context.Context, *PaymentSupplementRefundRequest) (*TxResult, error)
	// 支付网关(仅交易单使用)
	GatewayV1(context.Context, *PayGatewayRequest) (*TxResult, error)
	// 获取支付预交易数据
	GetPreparePaymentInfo(context.Context, *OrderInfoRequest) (*SPrepareTradeData, error)
	// 支付网关V2
	GatewayV2(context.Context, *PayGatewayV2Request) (*PayGatewayResponse, error)
	// *
	// 支付单混合支付
	//
	// @param storeCode 店铺编号
	// @param tradeNo   交易号
	// @param Data  支付数据
	// @return 支付结果,返回:order_status
	MixedPayment(context.Context, *MixedPaymentRequest) (*TxResult, error)
	// * 保存集成支付应用
	SaveIntegrateApp(context.Context, *SIntegrateApp) (*TxResult, error)
	// * 获取集成支付应用列表
	QueryIntegrateAppList(context.Context, *Empty) (*QueryIntegrateAppResponse, error)
	// 准备集成支付的参数
	PrepareIntegrateParams(context.Context, *IntegrateParamsRequest) (*IntegrateParamsResponse, error)
	// * 删除集成支付应用
	DeleteIntegrateApp(context.Context, *PayIntegrateAppId) (*TxResult, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) SubmitPaymentOrder(context.Context, *SPaymentOrder) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPaymentOrder not implemented")
}
func (UnimplementedPaymentServiceServer) GetPaymentOrder(context.Context, *PaymentOrderRequest) (*SPaymentOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentOrder not implemented")
}
func (UnimplementedPaymentServiceServer) AdjustOrder(context.Context, *AdjustOrderRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustOrder not implemented")
}
func (UnimplementedPaymentServiceServer) DiscountByBalance(context.Context, *DiscountBalanceRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscountByBalance not implemented")
}
func (UnimplementedPaymentServiceServer) DiscountByIntegral(context.Context, *DiscountIntegralRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscountByIntegral not implemented")
}
func (UnimplementedPaymentServiceServer) PaymentByWallet(context.Context, *WalletPaymentRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentByWallet not implemented")
}
func (UnimplementedPaymentServiceServer) HybridPayment(context.Context, *HyperPaymentRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HybridPayment not implemented")
}
func (UnimplementedPaymentServiceServer) FinishPayment(context.Context, *FinishPaymentRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishPayment not implemented")
}
func (UnimplementedPaymentServiceServer) QueryDivideOrders(context.Context, *DivideOrdersRequest) (*DivideOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDivideOrders not implemented")
}
func (UnimplementedPaymentServiceServer) Divide(context.Context, *PaymentDivideRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Divide not implemented")
}
func (UnimplementedPaymentServiceServer) CompleteDivide(context.Context, *PaymentOrderRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteDivide not implemented")
}
func (UnimplementedPaymentServiceServer) UpdateDivideStatus(context.Context, *UpdateDivideStatusRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDivideStatus not implemented")
}
func (UnimplementedPaymentServiceServer) RevertSubDivide(context.Context, *PaymentSubDivideRevertRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertSubDivide not implemented")
}
func (UnimplementedPaymentServiceServer) DivideSuccess(context.Context, *PaymentDivideSuccessRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DivideSuccess not implemented")
}
func (UnimplementedPaymentServiceServer) GetSubMerchant(context.Context, *SubMerchantCodeRequest) (*SSubMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubMerchant not implemented")
}
func (UnimplementedPaymentServiceServer) InitialSubMerchant(context.Context, *SubMerchantInitialRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitialSubMerchant not implemented")
}
func (UnimplementedPaymentServiceServer) StageSubMerchant(context.Context, *SSubMerchant) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StageSubMerchant not implemented")
}
func (UnimplementedPaymentServiceServer) SubmitSubMerchant(context.Context, *SubMerchantCodeRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSubMerchant not implemented")
}
func (UnimplementedPaymentServiceServer) UpdateSubMerchant(context.Context, *SubMerchantUpdateRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubMerchant not implemented")
}
func (UnimplementedPaymentServiceServer) QueryRefundableOrders(context.Context, *QueryRefundablePaymentOrdersRequest) (*RefundablePaymentOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRefundableOrders not implemented")
}
func (UnimplementedPaymentServiceServer) RequestRefund(context.Context, *PaymentRefundRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRefund not implemented")
}
func (UnimplementedPaymentServiceServer) RequestRefundAvail(context.Context, *PaymentRefundAvailRequest) (*PaymentRefundAvailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRefundAvail not implemented")
}
func (UnimplementedPaymentServiceServer) SupplementRefund(context.Context, *PaymentSupplementRefundRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplementRefund not implemented")
}
func (UnimplementedPaymentServiceServer) GatewayV1(context.Context, *PayGatewayRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayV1 not implemented")
}
func (UnimplementedPaymentServiceServer) GetPreparePaymentInfo(context.Context, *OrderInfoRequest) (*SPrepareTradeData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreparePaymentInfo not implemented")
}
func (UnimplementedPaymentServiceServer) GatewayV2(context.Context, *PayGatewayV2Request) (*PayGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayV2 not implemented")
}
func (UnimplementedPaymentServiceServer) MixedPayment(context.Context, *MixedPaymentRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MixedPayment not implemented")
}
func (UnimplementedPaymentServiceServer) SaveIntegrateApp(context.Context, *SIntegrateApp) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveIntegrateApp not implemented")
}
func (UnimplementedPaymentServiceServer) QueryIntegrateAppList(context.Context, *Empty) (*QueryIntegrateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIntegrateAppList not implemented")
}
func (UnimplementedPaymentServiceServer) PrepareIntegrateParams(context.Context, *IntegrateParamsRequest) (*IntegrateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareIntegrateParams not implemented")
}
func (UnimplementedPaymentServiceServer) DeleteIntegrateApp(context.Context, *PayIntegrateAppId) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIntegrateApp not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue()                        {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_SubmitPaymentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SPaymentOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).SubmitPaymentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_SubmitPaymentOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).SubmitPaymentOrder(ctx, req.(*SPaymentOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPaymentOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentOrder(ctx, req.(*PaymentOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_AdjustOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).AdjustOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_AdjustOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).AdjustOrder(ctx, req.(*AdjustOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_DiscountByBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).DiscountByBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_DiscountByBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).DiscountByBalance(ctx, req.(*DiscountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_DiscountByIntegral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscountIntegralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).DiscountByIntegral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_DiscountByIntegral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).DiscountByIntegral(ctx, req.(*DiscountIntegralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_PaymentByWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).PaymentByWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_PaymentByWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).PaymentByWallet(ctx, req.(*WalletPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_HybridPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HyperPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).HybridPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_HybridPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).HybridPayment(ctx, req.(*HyperPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_FinishPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).FinishPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_FinishPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).FinishPayment(ctx, req.(*FinishPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_QueryDivideOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivideOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).QueryDivideOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_QueryDivideOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).QueryDivideOrders(ctx, req.(*DivideOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentDivideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_Divide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Divide(ctx, req.(*PaymentDivideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CompleteDivide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CompleteDivide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CompleteDivide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CompleteDivide(ctx, req.(*PaymentOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_UpdateDivideStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDivideStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).UpdateDivideStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_UpdateDivideStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).UpdateDivideStatus(ctx, req.(*UpdateDivideStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RevertSubDivide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentSubDivideRevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RevertSubDivide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_RevertSubDivide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RevertSubDivide(ctx, req.(*PaymentSubDivideRevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_DivideSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentDivideSuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).DivideSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_DivideSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).DivideSuccess(ctx, req.(*PaymentDivideSuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetSubMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubMerchantCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetSubMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetSubMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetSubMerchant(ctx, req.(*SubMerchantCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_InitialSubMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubMerchantInitialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).InitialSubMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_InitialSubMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).InitialSubMerchant(ctx, req.(*SubMerchantInitialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_StageSubMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSubMerchant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).StageSubMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_StageSubMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).StageSubMerchant(ctx, req.(*SSubMerchant))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_SubmitSubMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubMerchantCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).SubmitSubMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_SubmitSubMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).SubmitSubMerchant(ctx, req.(*SubMerchantCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_UpdateSubMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubMerchantUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).UpdateSubMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_UpdateSubMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).UpdateSubMerchant(ctx, req.(*SubMerchantUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_QueryRefundableOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRefundablePaymentOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).QueryRefundableOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_QueryRefundableOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).QueryRefundableOrders(ctx, req.(*QueryRefundablePaymentOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RequestRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RequestRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_RequestRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RequestRefund(ctx, req.(*PaymentRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RequestRefundAvail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRefundAvailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RequestRefundAvail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_RequestRefundAvail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RequestRefundAvail(ctx, req.(*PaymentRefundAvailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_SupplementRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentSupplementRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).SupplementRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_SupplementRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).SupplementRefund(ctx, req.(*PaymentSupplementRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GatewayV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GatewayV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GatewayV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GatewayV1(ctx, req.(*PayGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPreparePaymentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPreparePaymentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPreparePaymentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPreparePaymentInfo(ctx, req.(*OrderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GatewayV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayGatewayV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GatewayV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GatewayV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GatewayV2(ctx, req.(*PayGatewayV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_MixedPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MixedPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).MixedPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_MixedPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).MixedPayment(ctx, req.(*MixedPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_SaveIntegrateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SIntegrateApp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).SaveIntegrateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_SaveIntegrateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).SaveIntegrateApp(ctx, req.(*SIntegrateApp))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_QueryIntegrateAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).QueryIntegrateAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_QueryIntegrateAppList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).QueryIntegrateAppList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_PrepareIntegrateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrateParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).PrepareIntegrateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_PrepareIntegrateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).PrepareIntegrateParams(ctx, req.(*IntegrateParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_DeleteIntegrateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayIntegrateAppId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).DeleteIntegrateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_DeleteIntegrateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).DeleteIntegrateApp(ctx, req.(*PayIntegrateAppId))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitPaymentOrder",
			Handler:    _PaymentService_SubmitPaymentOrder_Handler,
		},
		{
			MethodName: "GetPaymentOrder",
			Handler:    _PaymentService_GetPaymentOrder_Handler,
		},
		{
			MethodName: "AdjustOrder",
			Handler:    _PaymentService_AdjustOrder_Handler,
		},
		{
			MethodName: "DiscountByBalance",
			Handler:    _PaymentService_DiscountByBalance_Handler,
		},
		{
			MethodName: "DiscountByIntegral",
			Handler:    _PaymentService_DiscountByIntegral_Handler,
		},
		{
			MethodName: "PaymentByWallet",
			Handler:    _PaymentService_PaymentByWallet_Handler,
		},
		{
			MethodName: "HybridPayment",
			Handler:    _PaymentService_HybridPayment_Handler,
		},
		{
			MethodName: "FinishPayment",
			Handler:    _PaymentService_FinishPayment_Handler,
		},
		{
			MethodName: "QueryDivideOrders",
			Handler:    _PaymentService_QueryDivideOrders_Handler,
		},
		{
			MethodName: "Divide",
			Handler:    _PaymentService_Divide_Handler,
		},
		{
			MethodName: "CompleteDivide",
			Handler:    _PaymentService_CompleteDivide_Handler,
		},
		{
			MethodName: "UpdateDivideStatus",
			Handler:    _PaymentService_UpdateDivideStatus_Handler,
		},
		{
			MethodName: "RevertSubDivide",
			Handler:    _PaymentService_RevertSubDivide_Handler,
		},
		{
			MethodName: "DivideSuccess",
			Handler:    _PaymentService_DivideSuccess_Handler,
		},
		{
			MethodName: "GetSubMerchant",
			Handler:    _PaymentService_GetSubMerchant_Handler,
		},
		{
			MethodName: "InitialSubMerchant",
			Handler:    _PaymentService_InitialSubMerchant_Handler,
		},
		{
			MethodName: "StageSubMerchant",
			Handler:    _PaymentService_StageSubMerchant_Handler,
		},
		{
			MethodName: "SubmitSubMerchant",
			Handler:    _PaymentService_SubmitSubMerchant_Handler,
		},
		{
			MethodName: "UpdateSubMerchant",
			Handler:    _PaymentService_UpdateSubMerchant_Handler,
		},
		{
			MethodName: "QueryRefundableOrders",
			Handler:    _PaymentService_QueryRefundableOrders_Handler,
		},
		{
			MethodName: "RequestRefund",
			Handler:    _PaymentService_RequestRefund_Handler,
		},
		{
			MethodName: "RequestRefundAvail",
			Handler:    _PaymentService_RequestRefundAvail_Handler,
		},
		{
			MethodName: "SupplementRefund",
			Handler:    _PaymentService_SupplementRefund_Handler,
		},
		{
			MethodName: "GatewayV1",
			Handler:    _PaymentService_GatewayV1_Handler,
		},
		{
			MethodName: "GetPreparePaymentInfo",
			Handler:    _PaymentService_GetPreparePaymentInfo_Handler,
		},
		{
			MethodName: "GatewayV2",
			Handler:    _PaymentService_GatewayV2_Handler,
		},
		{
			MethodName: "MixedPayment",
			Handler:    _PaymentService_MixedPayment_Handler,
		},
		{
			MethodName: "SaveIntegrateApp",
			Handler:    _PaymentService_SaveIntegrateApp_Handler,
		},
		{
			MethodName: "QueryIntegrateAppList",
			Handler:    _PaymentService_QueryIntegrateAppList_Handler,
		},
		{
			MethodName: "PrepareIntegrateParams",
			Handler:    _PaymentService_PrepareIntegrateParams_Handler,
		},
		{
			MethodName: "DeleteIntegrateApp",
			Handler:    _PaymentService_DeleteIntegrateApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment_service.proto",
}
