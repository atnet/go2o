//*
// This file is auto generated by tto v0.5.8 !
// If you want to modify this code, please read the guide
// to modify code template.
//
// Get started: https://github.com/ixre/tto
//
// Copyright (C) 2009-2024 56X.NET, All rights reserved.
//
// name : chat_conversation_service.proto
// author : jarrysix
// date : 2024/06/26 21:47:08
// description :
// history :

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: chat_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatService_GetConversation_FullMethodName     = "/ChatService/getConversation"
	ChatService_DestroyConversation_FullMethodName = "/ChatService/destroyConversation"
	ChatService_Send_FullMethodName                = "/ChatService/send"
	ChatService_FetchMsgList_FullMethodName        = "/ChatService/fetchMsgList"
	ChatService_UpdateMsgAttrs_FullMethodName      = "/ChatService/updateMsgAttrs"
	ChatService_GetMsg_FullMethodName              = "/ChatService/getMsg"
	ChatService_RevertMsg_FullMethodName           = "/ChatService/revertMsg"
	ChatService_DeleteMsg_FullMethodName           = "/ChatService/deleteMsg"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	// 获取聊天会话
	GetConversation(ctx context.Context, in *ChatConversationRequest, opts ...grpc.CallOption) (*ChatConversationResponse, error)
	// 删除会话
	DestroyConversation(ctx context.Context, in *ConversationIdRequest, opts ...grpc.CallOption) (*Result, error)
	// 发送消息，并返回消息编号
	Send(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgResponse, error)
	// 获取最近的消息
	FetchMsgList(ctx context.Context, in *FetchMsgRequest, opts ...grpc.CallOption) (*FetchMsgResponse, error)
	// 更新消息扩展数据
	UpdateMsgAttrs(ctx context.Context, in *UpdateMsgAttrRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取消息
	GetMsg(ctx context.Context, in *MsgIdRequest, opts ...grpc.CallOption) (*SMsg, error)
	// 撤回消息
	RevertMsg(ctx context.Context, in *MsgIdRequest, opts ...grpc.CallOption) (*Result, error)
	// 删除消息
	DeleteMsg(ctx context.Context, in *MsgIdRequest, opts ...grpc.CallOption) (*Result, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) GetConversation(ctx context.Context, in *ChatConversationRequest, opts ...grpc.CallOption) (*ChatConversationResponse, error) {
	out := new(ChatConversationResponse)
	err := c.cc.Invoke(ctx, ChatService_GetConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DestroyConversation(ctx context.Context, in *ConversationIdRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, ChatService_DestroyConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) Send(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgResponse, error) {
	out := new(SendMsgResponse)
	err := c.cc.Invoke(ctx, ChatService_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FetchMsgList(ctx context.Context, in *FetchMsgRequest, opts ...grpc.CallOption) (*FetchMsgResponse, error) {
	out := new(FetchMsgResponse)
	err := c.cc.Invoke(ctx, ChatService_FetchMsgList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateMsgAttrs(ctx context.Context, in *UpdateMsgAttrRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, ChatService_UpdateMsgAttrs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetMsg(ctx context.Context, in *MsgIdRequest, opts ...grpc.CallOption) (*SMsg, error) {
	out := new(SMsg)
	err := c.cc.Invoke(ctx, ChatService_GetMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) RevertMsg(ctx context.Context, in *MsgIdRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, ChatService_RevertMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteMsg(ctx context.Context, in *MsgIdRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, ChatService_DeleteMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	// 获取聊天会话
	GetConversation(context.Context, *ChatConversationRequest) (*ChatConversationResponse, error)
	// 删除会话
	DestroyConversation(context.Context, *ConversationIdRequest) (*Result, error)
	// 发送消息，并返回消息编号
	Send(context.Context, *SendMsgRequest) (*SendMsgResponse, error)
	// 获取最近的消息
	FetchMsgList(context.Context, *FetchMsgRequest) (*FetchMsgResponse, error)
	// 更新消息扩展数据
	UpdateMsgAttrs(context.Context, *UpdateMsgAttrRequest) (*Result, error)
	// 获取消息
	GetMsg(context.Context, *MsgIdRequest) (*SMsg, error)
	// 撤回消息
	RevertMsg(context.Context, *MsgIdRequest) (*Result, error)
	// 删除消息
	DeleteMsg(context.Context, *MsgIdRequest) (*Result, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) GetConversation(context.Context, *ChatConversationRequest) (*ChatConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (UnimplementedChatServiceServer) DestroyConversation(context.Context, *ConversationIdRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyConversation not implemented")
}
func (UnimplementedChatServiceServer) Send(context.Context, *SendMsgRequest) (*SendMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedChatServiceServer) FetchMsgList(context.Context, *FetchMsgRequest) (*FetchMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMsgList not implemented")
}
func (UnimplementedChatServiceServer) UpdateMsgAttrs(context.Context, *UpdateMsgAttrRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMsgAttrs not implemented")
}
func (UnimplementedChatServiceServer) GetMsg(context.Context, *MsgIdRequest) (*SMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsg not implemented")
}
func (UnimplementedChatServiceServer) RevertMsg(context.Context, *MsgIdRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertMsg not implemented")
}
func (UnimplementedChatServiceServer) DeleteMsg(context.Context, *MsgIdRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMsg not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetConversation(ctx, req.(*ChatConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DestroyConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DestroyConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_DestroyConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DestroyConversation(ctx, req.(*ConversationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Send(ctx, req.(*SendMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FetchMsgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FetchMsgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_FetchMsgList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FetchMsgList(ctx, req.(*FetchMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateMsgAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMsgAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateMsgAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateMsgAttrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateMsgAttrs(ctx, req.(*UpdateMsgAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetMsg(ctx, req.(*MsgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_RevertMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RevertMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_RevertMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RevertMsg(ctx, req.(*MsgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_DeleteMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteMsg(ctx, req.(*MsgIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getConversation",
			Handler:    _ChatService_GetConversation_Handler,
		},
		{
			MethodName: "destroyConversation",
			Handler:    _ChatService_DestroyConversation_Handler,
		},
		{
			MethodName: "send",
			Handler:    _ChatService_Send_Handler,
		},
		{
			MethodName: "fetchMsgList",
			Handler:    _ChatService_FetchMsgList_Handler,
		},
		{
			MethodName: "updateMsgAttrs",
			Handler:    _ChatService_UpdateMsgAttrs_Handler,
		},
		{
			MethodName: "getMsg",
			Handler:    _ChatService_GetMsg_Handler,
		},
		{
			MethodName: "revertMsg",
			Handler:    _ChatService_RevertMsg_Handler,
		},
		{
			MethodName: "deleteMsg",
			Handler:    _ChatService_DeleteMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat_service.proto",
}
