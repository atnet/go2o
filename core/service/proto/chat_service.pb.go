//*
// This file is auto generated by tto v0.5.8 !
// If you want to modify this code, please read the guide
// to modify code template.
//
// Get started: https://github.com/ixre/tto
//
// Copyright (C) 2009-2024 56X.NET, All rights reserved.
//
// name : chat_conversation_service.proto
// author : jarrysix
// date : 2024/06/26 21:47:08
// description :
// history :

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.0
// source: chat_service.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 保存聊天会话请求
type SaveConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 编号
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 编码
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// 会话发起人
	Sid int64 `protobuf:"varint,3,opt,name=sid,proto3" json:"sid"`
	// 会话回复人
	Rid int64 `protobuf:"varint,4,opt,name=rid,proto3" json:"rid"`
	// 预留标志
	Flag int32 `protobuf:"varint,5,opt,name=flag,proto3" json:"flag"`
	// 聊天类型,1:用户  2:客服
	ChatType int32 `protobuf:"varint,6,opt,name=chatType,proto3" json:"chatType"`
	// 打招呼内容
	GreetWord string `protobuf:"bytes,7,opt,name=greetWord,proto3" json:"greetWord"`
	// 最后聊天时间
	LastChatTime int64 `protobuf:"varint,8,opt,name=lastChatTime,proto3" json:"lastChatTime"`
	// LastMsg
	LastMsg string `protobuf:"bytes,9,opt,name=lastMsg,proto3" json:"lastMsg"`
	// 关联业务单号
	OutOrderNo string `protobuf:"bytes,10,opt,name=outOrderNo,proto3" json:"outOrderNo"`
	// 创建时间
	CreateTime int64 `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime"`
	// 更新时间
	UpdateTime int64 `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime"`
}

func (x *SaveConversationRequest) Reset() {
	*x = SaveConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveConversationRequest) ProtoMessage() {}

func (x *SaveConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveConversationRequest.ProtoReflect.Descriptor instead.
func (*SaveConversationRequest) Descriptor() ([]byte, []int) {
	return file_chat_service_proto_rawDescGZIP(), []int{0}
}

func (x *SaveConversationRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SaveConversationRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SaveConversationRequest) GetSid() int64 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *SaveConversationRequest) GetRid() int64 {
	if x != nil {
		return x.Rid
	}
	return 0
}

func (x *SaveConversationRequest) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *SaveConversationRequest) GetChatType() int32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *SaveConversationRequest) GetGreetWord() string {
	if x != nil {
		return x.GreetWord
	}
	return ""
}

func (x *SaveConversationRequest) GetLastChatTime() int64 {
	if x != nil {
		return x.LastChatTime
	}
	return 0
}

func (x *SaveConversationRequest) GetLastMsg() string {
	if x != nil {
		return x.LastMsg
	}
	return ""
}

func (x *SaveConversationRequest) GetOutOrderNo() string {
	if x != nil {
		return x.OutOrderNo
	}
	return ""
}

func (x *SaveConversationRequest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SaveConversationRequest) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 聊天会话请求
type ChatConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户编号
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 聊天用户编号
	Rid int64 `protobuf:"varint,2,opt,name=rid,proto3" json:"rid"`
	// 聊天类型,0:用户 1:客服
	ChatType int64 `protobuf:"varint,3,opt,name=chatType,proto3" json:"chatType"`
	// 关联业务单号
	OutOrderNo string `protobuf:"bytes,4,opt,name=outOrderNo,proto3" json:"outOrderNo"`
	// 打招呼内容
	GreetWord string `protobuf:"bytes,5,opt,name=greetWord,proto3" json:"greetWord"`
}

func (x *ChatConversationRequest) Reset() {
	*x = ChatConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatConversationRequest) ProtoMessage() {}

func (x *ChatConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatConversationRequest.ProtoReflect.Descriptor instead.
func (*ChatConversationRequest) Descriptor() ([]byte, []int) {
	return file_chat_service_proto_rawDescGZIP(), []int{1}
}

func (x *ChatConversationRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ChatConversationRequest) GetRid() int64 {
	if x != nil {
		return x.Rid
	}
	return 0
}

func (x *ChatConversationRequest) GetChatType() int64 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *ChatConversationRequest) GetOutOrderNo() string {
	if x != nil {
		return x.OutOrderNo
	}
	return ""
}

func (x *ChatConversationRequest) GetGreetWord() string {
	if x != nil {
		return x.GreetWord
	}
	return ""
}

// 聊天用户信息
type SChatUserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 头像
	ProfilePhoto string `protobuf:"bytes,1,opt,name=profilePhoto,proto3" json:"profilePhoto"`
	// 用户代码
	UserCode string `protobuf:"bytes,2,opt,name=userCode,proto3" json:"userCode"`
	// 昵称
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname"`
	// 用户角色
	UserRole int32 `protobuf:"varint,4,opt,name=userRole,proto3" json:"userRole"`
}

func (x *SChatUserProfile) Reset() {
	*x = SChatUserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SChatUserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SChatUserProfile) ProtoMessage() {}

func (x *SChatUserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_chat_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SChatUserProfile.ProtoReflect.Descriptor instead.
func (*SChatUserProfile) Descriptor() ([]byte, []int) {
	return file_chat_service_proto_rawDescGZIP(), []int{2}
}

func (x *SChatUserProfile) GetProfilePhoto() string {
	if x != nil {
		return x.ProfilePhoto
	}
	return ""
}

func (x *SChatUserProfile) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *SChatUserProfile) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SChatUserProfile) GetUserRole() int32 {
	if x != nil {
		return x.UserRole
	}
	return 0
}

// 聊天会话响应
type ChatConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 错误码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// 错误信息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	// 编号
	ConvId int64 `protobuf:"varint,3,opt,name=convId,proto3" json:"convId"`
	// 编码
	Key string `protobuf:"bytes,4,opt,name=key,proto3" json:"key"`
	// 会话发起人
	Sid int64 `protobuf:"varint,5,opt,name=sid,proto3" json:"sid"`
	// 会话回复人
	Rid int64 `protobuf:"varint,6,opt,name=rid,proto3" json:"rid"`
	// 回复人信息
	ChatProfile *SChatUserProfile `protobuf:"bytes,7,opt,name=chatProfile,proto3" json:"chatProfile"`
	// 聊天类型
	ChatType int32 `protobuf:"varint,8,opt,name=chatType,proto3" json:"chatType"`
	// 最后消息
	LastMsg string `protobuf:"bytes,9,opt,name=lastMsg,proto3" json:"lastMsg"`
	// 最后聊天时间
	LastChatTime int64 `protobuf:"varint,10,opt,name=lastChatTime,proto3" json:"lastChatTime"`
}

func (x *ChatConversationResponse) Reset() {
	*x = ChatConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatConversationResponse) ProtoMessage() {}

func (x *ChatConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatConversationResponse.ProtoReflect.Descriptor instead.
func (*ChatConversationResponse) Descriptor() ([]byte, []int) {
	return file_chat_service_proto_rawDescGZIP(), []int{3}
}

func (x *ChatConversationResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ChatConversationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChatConversationResponse) GetConvId() int64 {
	if x != nil {
		return x.ConvId
	}
	return 0
}

func (x *ChatConversationResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ChatConversationResponse) GetSid() int64 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *ChatConversationResponse) GetRid() int64 {
	if x != nil {
		return x.Rid
	}
	return 0
}

func (x *ChatConversationResponse) GetChatProfile() *SChatUserProfile {
	if x != nil {
		return x.ChatProfile
	}
	return nil
}

func (x *ChatConversationResponse) GetChatType() int32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *ChatConversationResponse) GetLastMsg() string {
	if x != nil {
		return x.LastMsg
	}
	return ""
}

func (x *ChatConversationResponse) GetLastChatTime() int64 {
	if x != nil {
		return x.LastChatTime
	}
	return 0
}

// 绑定关联业务单号请求
type BindChatOutOrderNoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户编号
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 会话编号
	ConvId int64 `protobuf:"varint,2,opt,name=convId,proto3" json:"convId"`
	// 关联业务单号
	OutOrderNo string `protobuf:"bytes,3,opt,name=outOrderNo,proto3" json:"outOrderNo"`
}

func (x *BindChatOutOrderNoRequest) Reset() {
	*x = BindChatOutOrderNoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindChatOutOrderNoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindChatOutOrderNoRequest) ProtoMessage() {}

func (x *BindChatOutOrderNoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindChatOutOrderNoRequest.ProtoReflect.Descriptor instead.
func (*BindChatOutOrderNoRequest) Descriptor() ([]byte, []int) {
	return file_chat_service_proto_rawDescGZIP(), []int{4}
}

func (x *BindChatOutOrderNoRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BindChatOutOrderNoRequest) GetConvId() int64 {
	if x != nil {
		return x.ConvId
	}
	return 0
}

func (x *BindChatOutOrderNoRequest) GetOutOrderNo() string {
	if x != nil {
		return x.OutOrderNo
	}
	return ""
}

// 聊天会话
type SConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 编号
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 编码
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	// 会话发起人
	Sid int64 `protobuf:"varint,3,opt,name=sid,proto3" json:"sid"`
	// 会话回复人
	Rid int64 `protobuf:"varint,4,opt,name=rid,proto3" json:"rid"`
	// 预留标志
	Flag int32 `protobuf:"varint,5,opt,name=flag,proto3" json:"flag"`
	// 聊天类型,1:用户  2:客服
	ChatType int32 `protobuf:"varint,6,opt,name=chatType,proto3" json:"chatType"`
	// 打招呼内容
	GreetWord string `protobuf:"bytes,7,opt,name=greetWord,proto3" json:"greetWord"`
	// 最后聊天时间
	LastChatTime int64 `protobuf:"varint,8,opt,name=lastChatTime,proto3" json:"lastChatTime"`
	// LastMsg
	LastMsg string `protobuf:"bytes,9,opt,name=lastMsg,proto3" json:"lastMsg"`
	// 关联业务单号
	OutOrderNo string `protobuf:"bytes,10,opt,name=outOrderNo,proto3" json:"outOrderNo"`
	// 创建时间
	CreateTime int64 `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime"`
	// 更新时间
	UpdateTime int64 `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime"`
}

func (x *SConversation) Reset() {
	*x = SConversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SConversation) ProtoMessage() {}

func (x *SConversation) ProtoReflect() protoreflect.Message {
	mi := &file_chat_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SConversation.ProtoReflect.Descriptor instead.
func (*SConversation) Descriptor() ([]byte, []int) {
	return file_chat_service_proto_rawDescGZIP(), []int{5}
}

func (x *SConversation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SConversation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SConversation) GetSid() int64 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *SConversation) GetRid() int64 {
	if x != nil {
		return x.Rid
	}
	return 0
}

func (x *SConversation) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *SConversation) GetChatType() int32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *SConversation) GetGreetWord() string {
	if x != nil {
		return x.GreetWord
	}
	return ""
}

func (x *SConversation) GetLastChatTime() int64 {
	if x != nil {
		return x.LastChatTime
	}
	return 0
}

func (x *SConversation) GetLastMsg() string {
	if x != nil {
		return x.LastMsg
	}
	return ""
}

func (x *SConversation) GetOutOrderNo() string {
	if x != nil {
		return x.OutOrderNo
	}
	return ""
}

func (x *SConversation) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SConversation) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 会话编号请求
type ConversationIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户编号
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 会话编号
	ConvId int64 `protobuf:"varint,2,opt,name=convId,proto3" json:"convId"`
}

func (x *ConversationIdRequest) Reset() {
	*x = ConversationIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationIdRequest) ProtoMessage() {}

func (x *ConversationIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationIdRequest.ProtoReflect.Descriptor instead.
func (*ConversationIdRequest) Descriptor() ([]byte, []int) {
	return file_chat_service_proto_rawDescGZIP(), []int{6}
}

func (x *ConversationIdRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ConversationIdRequest) GetConvId() int64 {
	if x != nil {
		return x.ConvId
	}
	return 0
}

// 发送消息消息请求
type SendMsgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户编号
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 会话编号
	ConvId int64 `protobuf:"varint,2,opt,name=convId,proto3" json:"convId"`
	// 消息类型, 1: 文本  2: 图片  3: 表情  4: 文件  5:语音  6:位置  7:语音  8:红包  9:名片  11: 委托申请
	MsgType int32 `protobuf:"varint,3,opt,name=msgType,proto3" json:"msgType"`
	// 消息内容
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content"`
	// 扩展数据
	Extra map[string]string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SendMsgRequest) Reset() {
	*x = SendMsgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgRequest) ProtoMessage() {}

func (x *SendMsgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgRequest.ProtoReflect.Descriptor instead.
func (*SendMsgRequest) Descriptor() ([]byte, []int) {
	return file_chat_service_proto_rawDescGZIP(), []int{7}
}

func (x *SendMsgRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SendMsgRequest) GetConvId() int64 {
	if x != nil {
		return x.ConvId
	}
	return 0
}

func (x *SendMsgRequest) GetMsgType() int32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *SendMsgRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendMsgRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// 发送消息消息响应
type SendMsgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 错误码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// 错误信息
	Messsge string `protobuf:"bytes,2,opt,name=messsge,proto3" json:"messsge"`
	// 消息编号
	MsgId int64 `protobuf:"varint,3,opt,name=msgId,proto3" json:"msgId"`
}

func (x *SendMsgResponse) Reset() {
	*x = SendMsgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgResponse) ProtoMessage() {}

func (x *SendMsgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgResponse.ProtoReflect.Descriptor instead.
func (*SendMsgResponse) Descriptor() ([]byte, []int) {
	return file_chat_service_proto_rawDescGZIP(), []int{8}
}

func (x *SendMsgResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SendMsgResponse) GetMesssge() string {
	if x != nil {
		return x.Messsge
	}
	return ""
}

func (x *SendMsgResponse) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

// 查询聊天会话请求
type FetchMsgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户编号
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 会话编号
	ConvId int64 `protobuf:"varint,2,opt,name=convId,proto3" json:"convId"`
	// 查询时间
	LastTime int64 `protobuf:"varint,3,opt,name=lastTime,proto3" json:"lastTime"`
	// 数量
	Size int32 `protobuf:"varint,4,opt,name=size,proto3" json:"size"`
	// 是否查询历史消息,false为查询最新消息
	HistoryMsg bool `protobuf:"varint,5,opt,name=historyMsg,proto3" json:"historyMsg"`
}

func (x *FetchMsgRequest) Reset() {
	*x = FetchMsgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMsgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMsgRequest) ProtoMessage() {}

func (x *FetchMsgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMsgRequest.ProtoReflect.Descriptor instead.
func (*FetchMsgRequest) Descriptor() ([]byte, []int) {
	return file_chat_service_proto_rawDescGZIP(), []int{9}
}

func (x *FetchMsgRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FetchMsgRequest) GetConvId() int64 {
	if x != nil {
		return x.ConvId
	}
	return 0
}

func (x *FetchMsgRequest) GetLastTime() int64 {
	if x != nil {
		return x.LastTime
	}
	return 0
}

func (x *FetchMsgRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FetchMsgRequest) GetHistoryMsg() bool {
	if x != nil {
		return x.HistoryMsg
	}
	return false
}

// 会话编号请求
type MsgIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户编号
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 会话编号
	ConvId int64 `protobuf:"varint,2,opt,name=convId,proto3" json:"convId"`
	// 消息编号
	MsgId int64 `protobuf:"varint,3,opt,name=msgId,proto3" json:"msgId"`
}

func (x *MsgIdRequest) Reset() {
	*x = MsgIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgIdRequest) ProtoMessage() {}

func (x *MsgIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgIdRequest.ProtoReflect.Descriptor instead.
func (*MsgIdRequest) Descriptor() ([]byte, []int) {
	return file_chat_service_proto_rawDescGZIP(), []int{10}
}

func (x *MsgIdRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MsgIdRequest) GetConvId() int64 {
	if x != nil {
		return x.ConvId
	}
	return 0
}

func (x *MsgIdRequest) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

// 更新消息属性请求
type UpdateMsgAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户编号
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 会话编号
	ConvId int64 `protobuf:"varint,2,opt,name=convId,proto3" json:"convId"`
	// 消息编号
	MsgId int64 `protobuf:"varint,3,opt,name=msgId,proto3" json:"msgId"`
	// 属性
	Attr map[string]string `protobuf:"bytes,4,rep,name=attr,proto3" json:"attr" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateMsgAttrRequest) Reset() {
	*x = UpdateMsgAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMsgAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMsgAttrRequest) ProtoMessage() {}

func (x *UpdateMsgAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMsgAttrRequest.ProtoReflect.Descriptor instead.
func (*UpdateMsgAttrRequest) Descriptor() ([]byte, []int) {
	return file_chat_service_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateMsgAttrRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UpdateMsgAttrRequest) GetConvId() int64 {
	if x != nil {
		return x.ConvId
	}
	return 0
}

func (x *UpdateMsgAttrRequest) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *UpdateMsgAttrRequest) GetAttr() map[string]string {
	if x != nil {
		return x.Attr
	}
	return nil
}

// 查询聊天会话响应
type FetchMsgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息列表
	MsgList []*SMsg `protobuf:"bytes,1,rep,name=msgList,proto3" json:"msgList"`
	// 是否已结束,没有更多消息
	IsOver bool `protobuf:"varint,2,opt,name=isOver,proto3" json:"isOver"`
}

func (x *FetchMsgResponse) Reset() {
	*x = FetchMsgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMsgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMsgResponse) ProtoMessage() {}

func (x *FetchMsgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMsgResponse.ProtoReflect.Descriptor instead.
func (*FetchMsgResponse) Descriptor() ([]byte, []int) {
	return file_chat_service_proto_rawDescGZIP(), []int{12}
}

func (x *FetchMsgResponse) GetMsgList() []*SMsg {
	if x != nil {
		return x.MsgList
	}
	return nil
}

func (x *FetchMsgResponse) GetIsOver() bool {
	if x != nil {
		return x.IsOver
	}
	return false
}

// 消息消息
type SMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 编号
	MsgId int64 `protobuf:"varint,1,opt,name=msgId,proto3" json:"msgId"`
	// 发送人编号
	Sid int64 `protobuf:"varint,2,opt,name=sid,proto3" json:"sid"`
	// 消息类型, 1: 文本  2: 图片  3: 表情  4: 文件  5:语音  6:位置  7:语音  8:红包  9:名片  11: 委托申请
	MsgType int32 `protobuf:"varint,3,opt,name=msgType,proto3" json:"msgType"`
	// 消息标志: 1:提示 2:撤回 4:删除
	MsgFlag int32 `protobuf:"varint,4,opt,name=msgFlag,proto3" json:"msgFlag"`
	// 消息内容
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content"`
	// 扩展数据
	Extra map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 创建时间
	CreateTime int64 `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime"`
}

func (x *SMsg) Reset() {
	*x = SMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMsg) ProtoMessage() {}

func (x *SMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMsg.ProtoReflect.Descriptor instead.
func (*SMsg) Descriptor() ([]byte, []int) {
	return file_chat_service_proto_rawDescGZIP(), []int{13}
}

func (x *SMsg) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *SMsg) GetSid() int64 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *SMsg) GetMsgType() int32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *SMsg) GetMsgFlag() int32 {
	if x != nil {
		return x.MsgFlag
	}
	return 0
}

func (x *SMsg) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SMsg) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *SMsg) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

var File_chat_service_proto protoreflect.FileDescriptor

var file_chat_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xcb, 0x02, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x65, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x65, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x97, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x72, 0x65, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x72, 0x65, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x53,
	0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x65, 0x0a, 0x19, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x75, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x22, 0xc1, 0x02, 0x0a, 0x0d, 0x53, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x67, 0x72, 0x65, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x72, 0x65, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x15, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x22, 0xda, 0x01,
	0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x0f, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x73, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x73, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x64, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x22,
	0x4e, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22,
	0xc4, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x76,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x73, 0x67, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x1a, 0x37, 0x0a,
	0x09, 0x41, 0x74, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x6d, 0x73,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x53, 0x4d,
	0x73, 0x67, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x22, 0xfe, 0x01, 0x0a, 0x04, 0x53, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x73, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x73, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6d, 0x73, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x53, 0x4d, 0x73, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x32, 0xca, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x13,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x54, 0x78,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x64, 0x4f, 0x75,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1a, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x4f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x29, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x0f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x41, 0x74, 0x74, 0x72,
	0x73, 0x12, 0x15, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x67, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x0d, 0x2e,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x05, 0x2e, 0x53,
	0x4d, 0x73, 0x67, 0x12, 0x25, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67,
	0x12, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x09, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x0d, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x1f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x67, 0x6f, 0x32, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_service_proto_rawDescOnce sync.Once
	file_chat_service_proto_rawDescData = file_chat_service_proto_rawDesc
)

func file_chat_service_proto_rawDescGZIP() []byte {
	file_chat_service_proto_rawDescOnce.Do(func() {
		file_chat_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_service_proto_rawDescData)
	})
	return file_chat_service_proto_rawDescData
}

var file_chat_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_chat_service_proto_goTypes = []interface{}{
	(*SaveConversationRequest)(nil),   // 0: SaveConversationRequest
	(*ChatConversationRequest)(nil),   // 1: ChatConversationRequest
	(*SChatUserProfile)(nil),          // 2: SChatUserProfile
	(*ChatConversationResponse)(nil),  // 3: ChatConversationResponse
	(*BindChatOutOrderNoRequest)(nil), // 4: BindChatOutOrderNoRequest
	(*SConversation)(nil),             // 5: SConversation
	(*ConversationIdRequest)(nil),     // 6: ConversationIdRequest
	(*SendMsgRequest)(nil),            // 7: SendMsgRequest
	(*SendMsgResponse)(nil),           // 8: SendMsgResponse
	(*FetchMsgRequest)(nil),           // 9: FetchMsgRequest
	(*MsgIdRequest)(nil),              // 10: MsgIdRequest
	(*UpdateMsgAttrRequest)(nil),      // 11: UpdateMsgAttrRequest
	(*FetchMsgResponse)(nil),          // 12: FetchMsgResponse
	(*SMsg)(nil),                      // 13: SMsg
	nil,                               // 14: SendMsgRequest.ExtraEntry
	nil,                               // 15: UpdateMsgAttrRequest.AttrEntry
	nil,                               // 16: SMsg.ExtraEntry
	(*TxResult)(nil),                  // 17: TxResult
}
var file_chat_service_proto_depIdxs = []int32{
	2,  // 0: ChatConversationResponse.chatProfile:type_name -> SChatUserProfile
	14, // 1: SendMsgRequest.extra:type_name -> SendMsgRequest.ExtraEntry
	15, // 2: UpdateMsgAttrRequest.attr:type_name -> UpdateMsgAttrRequest.AttrEntry
	13, // 3: FetchMsgResponse.msgList:type_name -> SMsg
	16, // 4: SMsg.extra:type_name -> SMsg.ExtraEntry
	1,  // 5: ChatService.getConversation:input_type -> ChatConversationRequest
	6,  // 6: ChatService.destroyConversation:input_type -> ConversationIdRequest
	4,  // 7: ChatService.bindOutOrderNo:input_type -> BindChatOutOrderNoRequest
	7,  // 8: ChatService.send:input_type -> SendMsgRequest
	9,  // 9: ChatService.fetchMsgList:input_type -> FetchMsgRequest
	11, // 10: ChatService.updateMsgAttrs:input_type -> UpdateMsgAttrRequest
	10, // 11: ChatService.getMsg:input_type -> MsgIdRequest
	10, // 12: ChatService.revertMsg:input_type -> MsgIdRequest
	10, // 13: ChatService.deleteMsg:input_type -> MsgIdRequest
	3,  // 14: ChatService.getConversation:output_type -> ChatConversationResponse
	17, // 15: ChatService.destroyConversation:output_type -> TxResult
	17, // 16: ChatService.bindOutOrderNo:output_type -> TxResult
	8,  // 17: ChatService.send:output_type -> SendMsgResponse
	12, // 18: ChatService.fetchMsgList:output_type -> FetchMsgResponse
	17, // 19: ChatService.updateMsgAttrs:output_type -> TxResult
	13, // 20: ChatService.getMsg:output_type -> SMsg
	17, // 21: ChatService.revertMsg:output_type -> TxResult
	17, // 22: ChatService.deleteMsg:output_type -> TxResult
	14, // [14:23] is the sub-list for method output_type
	5,  // [5:14] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_chat_service_proto_init() }
func file_chat_service_proto_init() {
	if File_chat_service_proto != nil {
		return
	}
	file_global_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chat_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SChatUserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindChatOutOrderNoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SConversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMsgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMsgAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMsgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_service_proto_goTypes,
		DependencyIndexes: file_chat_service_proto_depIdxs,
		MessageInfos:      file_chat_service_proto_msgTypes,
	}.Build()
	File_chat_service_proto = out.File
	file_chat_service_proto_rawDesc = nil
	file_chat_service_proto_goTypes = nil
	file_chat_service_proto_depIdxs = nil
}
