// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: rbac_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RbacServiceClient is the client API for RbacService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RbacServiceClient interface {
	// 用户登录
	UserLogin(ctx context.Context, in *RbacLoginRequest, opts ...grpc.CallOption) (*RbacLoginResponse, error)
	// 检查令牌是否有效并返回新的令牌
	CheckRBACToken(ctx context.Context, in *RbacCheckTokenRequest, opts ...grpc.CallOption) (*RbacCheckTokenResponse, error)
	// 获取JWT密钥
	GetJwtToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error)
	// 获取用户资源
	GetUserResource(ctx context.Context, in *RbacUserResourceRequest, opts ...grpc.CallOption) (*RbacUserResourceResponse, error)
	// 获取资源树形数据
	QueryRbacResourceList(ctx context.Context, in *QueryRbacResRequest, opts ...grpc.CallOption) (*QueryRbacResourceResponse, error)
	// 移动资源顺序
	MoveResourceOrdinal(ctx context.Context, in *MoveResourceOrdinalRequest, opts ...grpc.CallOption) (*Result, error)
	// 部门树形数据
	DepartTree(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SRbacTree, error)
	// 保存部门
	SaveDepart(ctx context.Context, in *SaveDepartRequest, opts ...grpc.CallOption) (*SaveDepartResponse, error)
	// 获取部门
	GetDepart(ctx context.Context, in *RbacDepartId, opts ...grpc.CallOption) (*SPermDept, error)
	// 删除部门
	DeleteDepart(ctx context.Context, in *RbacDepartId, opts ...grpc.CallOption) (*Result, error)
	// 保存岗位
	SaveJob(ctx context.Context, in *SaveJobRequest, opts ...grpc.CallOption) (*SaveJobResponse, error)
	// 获取岗位
	GetJob(ctx context.Context, in *RbacJobId, opts ...grpc.CallOption) (*SRbacJob, error)
	// 获取岗位列表
	QueryJobList(ctx context.Context, in *QueryJobRequest, opts ...grpc.CallOption) (*QueryJobResponse, error)
	// 删除岗位
	DeleteJob(ctx context.Context, in *RbacJobId, opts ...grpc.CallOption) (*Result, error)
	// 获取岗位分页数据
	PagingJobList(ctx context.Context, in *RbacJobPagingRequest, opts ...grpc.CallOption) (*PagingRbacJobResponse, error)
	// 保存系统用户
	SaveUser(ctx context.Context, in *SaveRbacUserRequest, opts ...grpc.CallOption) (*SaveRbacUserResponse, error)
	// 获取系统用户
	GetUser(ctx context.Context, in *RbacUserId, opts ...grpc.CallOption) (*SRbacUser, error)
	// 删除系统用户
	DeleteUser(ctx context.Context, in *RbacUserId, opts ...grpc.CallOption) (*Result, error)
	// 获取系统用户分页数据
	PagingUser(ctx context.Context, in *PagingRbacUserRequest, opts ...grpc.CallOption) (*PagingRbacUserResponse, error)
	// 保存角色
	SavePermRole(ctx context.Context, in *SaveRbacRoleRequest, opts ...grpc.CallOption) (*SaveRbacRoleResponse, error)
	// 保存角色
	UpdateRoleResource(ctx context.Context, in *UpdateRoleResRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取角色
	GetRole(ctx context.Context, in *RbacRoleId, opts ...grpc.CallOption) (*SRbacRole, error)
	// 获取角色列表
	QueryPermRoleList(ctx context.Context, in *QueryRbacRoleRequest, opts ...grpc.CallOption) (*QueryRbacRoleResponse, error)
	// 删除角色
	DeletePermRole(ctx context.Context, in *RbacRoleId, opts ...grpc.CallOption) (*Result, error)
	// 获取角色分页数据
	PagingPermRole(ctx context.Context, in *RbacRolePagingRequest, opts ...grpc.CallOption) (*PagingRbacRoleResponse, error)
	// 保存PermRes
	SaveRbacResource(ctx context.Context, in *SaveRbacResRequest, opts ...grpc.CallOption) (*SaveRbacResResponse, error)
	// 获取PermRes
	GetRbacRes(ctx context.Context, in *PermResId, opts ...grpc.CallOption) (*SRbacRes, error)
	// 删除PermRes
	DeleteRbacResource(ctx context.Context, in *PermResId, opts ...grpc.CallOption) (*Result, error)
	// 获取用户登录日志分页数据
	PagingLoginLog(ctx context.Context, in *LoginLogPagingRequest, opts ...grpc.CallOption) (*LoginLogPagingResponse, error)
}

type rbacServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRbacServiceClient(cc grpc.ClientConnInterface) RbacServiceClient {
	return &rbacServiceClient{cc}
}

func (c *rbacServiceClient) UserLogin(ctx context.Context, in *RbacLoginRequest, opts ...grpc.CallOption) (*RbacLoginResponse, error) {
	out := new(RbacLoginResponse)
	err := c.cc.Invoke(ctx, "/RbacService/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) CheckRBACToken(ctx context.Context, in *RbacCheckTokenRequest, opts ...grpc.CallOption) (*RbacCheckTokenResponse, error) {
	out := new(RbacCheckTokenResponse)
	err := c.cc.Invoke(ctx, "/RbacService/CheckRBACToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetJwtToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/RbacService/GetJwtToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetUserResource(ctx context.Context, in *RbacUserResourceRequest, opts ...grpc.CallOption) (*RbacUserResourceResponse, error) {
	out := new(RbacUserResourceResponse)
	err := c.cc.Invoke(ctx, "/RbacService/GetUserResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) QueryRbacResourceList(ctx context.Context, in *QueryRbacResRequest, opts ...grpc.CallOption) (*QueryRbacResourceResponse, error) {
	out := new(QueryRbacResourceResponse)
	err := c.cc.Invoke(ctx, "/RbacService/QueryRbacResourceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) MoveResourceOrdinal(ctx context.Context, in *MoveResourceOrdinalRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RbacService/MoveResourceOrdinal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) DepartTree(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SRbacTree, error) {
	out := new(SRbacTree)
	err := c.cc.Invoke(ctx, "/RbacService/DepartTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) SaveDepart(ctx context.Context, in *SaveDepartRequest, opts ...grpc.CallOption) (*SaveDepartResponse, error) {
	out := new(SaveDepartResponse)
	err := c.cc.Invoke(ctx, "/RbacService/SaveDepart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetDepart(ctx context.Context, in *RbacDepartId, opts ...grpc.CallOption) (*SPermDept, error) {
	out := new(SPermDept)
	err := c.cc.Invoke(ctx, "/RbacService/GetDepart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) DeleteDepart(ctx context.Context, in *RbacDepartId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RbacService/DeleteDepart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) SaveJob(ctx context.Context, in *SaveJobRequest, opts ...grpc.CallOption) (*SaveJobResponse, error) {
	out := new(SaveJobResponse)
	err := c.cc.Invoke(ctx, "/RbacService/SaveJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetJob(ctx context.Context, in *RbacJobId, opts ...grpc.CallOption) (*SRbacJob, error) {
	out := new(SRbacJob)
	err := c.cc.Invoke(ctx, "/RbacService/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) QueryJobList(ctx context.Context, in *QueryJobRequest, opts ...grpc.CallOption) (*QueryJobResponse, error) {
	out := new(QueryJobResponse)
	err := c.cc.Invoke(ctx, "/RbacService/QueryJobList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) DeleteJob(ctx context.Context, in *RbacJobId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RbacService/DeleteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) PagingJobList(ctx context.Context, in *RbacJobPagingRequest, opts ...grpc.CallOption) (*PagingRbacJobResponse, error) {
	out := new(PagingRbacJobResponse)
	err := c.cc.Invoke(ctx, "/RbacService/PagingJobList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) SaveUser(ctx context.Context, in *SaveRbacUserRequest, opts ...grpc.CallOption) (*SaveRbacUserResponse, error) {
	out := new(SaveRbacUserResponse)
	err := c.cc.Invoke(ctx, "/RbacService/SaveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetUser(ctx context.Context, in *RbacUserId, opts ...grpc.CallOption) (*SRbacUser, error) {
	out := new(SRbacUser)
	err := c.cc.Invoke(ctx, "/RbacService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) DeleteUser(ctx context.Context, in *RbacUserId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RbacService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) PagingUser(ctx context.Context, in *PagingRbacUserRequest, opts ...grpc.CallOption) (*PagingRbacUserResponse, error) {
	out := new(PagingRbacUserResponse)
	err := c.cc.Invoke(ctx, "/RbacService/PagingUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) SavePermRole(ctx context.Context, in *SaveRbacRoleRequest, opts ...grpc.CallOption) (*SaveRbacRoleResponse, error) {
	out := new(SaveRbacRoleResponse)
	err := c.cc.Invoke(ctx, "/RbacService/SavePermRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) UpdateRoleResource(ctx context.Context, in *UpdateRoleResRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RbacService/UpdateRoleResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetRole(ctx context.Context, in *RbacRoleId, opts ...grpc.CallOption) (*SRbacRole, error) {
	out := new(SRbacRole)
	err := c.cc.Invoke(ctx, "/RbacService/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) QueryPermRoleList(ctx context.Context, in *QueryRbacRoleRequest, opts ...grpc.CallOption) (*QueryRbacRoleResponse, error) {
	out := new(QueryRbacRoleResponse)
	err := c.cc.Invoke(ctx, "/RbacService/QueryPermRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) DeletePermRole(ctx context.Context, in *RbacRoleId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RbacService/DeletePermRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) PagingPermRole(ctx context.Context, in *RbacRolePagingRequest, opts ...grpc.CallOption) (*PagingRbacRoleResponse, error) {
	out := new(PagingRbacRoleResponse)
	err := c.cc.Invoke(ctx, "/RbacService/PagingPermRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) SaveRbacResource(ctx context.Context, in *SaveRbacResRequest, opts ...grpc.CallOption) (*SaveRbacResResponse, error) {
	out := new(SaveRbacResResponse)
	err := c.cc.Invoke(ctx, "/RbacService/SaveRbacResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetRbacRes(ctx context.Context, in *PermResId, opts ...grpc.CallOption) (*SRbacRes, error) {
	out := new(SRbacRes)
	err := c.cc.Invoke(ctx, "/RbacService/GetRbacRes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) DeleteRbacResource(ctx context.Context, in *PermResId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/RbacService/DeleteRbacResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) PagingLoginLog(ctx context.Context, in *LoginLogPagingRequest, opts ...grpc.CallOption) (*LoginLogPagingResponse, error) {
	out := new(LoginLogPagingResponse)
	err := c.cc.Invoke(ctx, "/RbacService/PagingLoginLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RbacServiceServer is the server API for RbacService service.
// All implementations must embed UnimplementedRbacServiceServer
// for forward compatibility
type RbacServiceServer interface {
	// 用户登录
	UserLogin(context.Context, *RbacLoginRequest) (*RbacLoginResponse, error)
	// 检查令牌是否有效并返回新的令牌
	CheckRBACToken(context.Context, *RbacCheckTokenRequest) (*RbacCheckTokenResponse, error)
	// 获取JWT密钥
	GetJwtToken(context.Context, *Empty) (*String, error)
	// 获取用户资源
	GetUserResource(context.Context, *RbacUserResourceRequest) (*RbacUserResourceResponse, error)
	// 获取资源树形数据
	QueryRbacResourceList(context.Context, *QueryRbacResRequest) (*QueryRbacResourceResponse, error)
	// 移动资源顺序
	MoveResourceOrdinal(context.Context, *MoveResourceOrdinalRequest) (*Result, error)
	// 部门树形数据
	DepartTree(context.Context, *Empty) (*SRbacTree, error)
	// 保存部门
	SaveDepart(context.Context, *SaveDepartRequest) (*SaveDepartResponse, error)
	// 获取部门
	GetDepart(context.Context, *RbacDepartId) (*SPermDept, error)
	// 删除部门
	DeleteDepart(context.Context, *RbacDepartId) (*Result, error)
	// 保存岗位
	SaveJob(context.Context, *SaveJobRequest) (*SaveJobResponse, error)
	// 获取岗位
	GetJob(context.Context, *RbacJobId) (*SRbacJob, error)
	// 获取岗位列表
	QueryJobList(context.Context, *QueryJobRequest) (*QueryJobResponse, error)
	// 删除岗位
	DeleteJob(context.Context, *RbacJobId) (*Result, error)
	// 获取岗位分页数据
	PagingJobList(context.Context, *RbacJobPagingRequest) (*PagingRbacJobResponse, error)
	// 保存系统用户
	SaveUser(context.Context, *SaveRbacUserRequest) (*SaveRbacUserResponse, error)
	// 获取系统用户
	GetUser(context.Context, *RbacUserId) (*SRbacUser, error)
	// 删除系统用户
	DeleteUser(context.Context, *RbacUserId) (*Result, error)
	// 获取系统用户分页数据
	PagingUser(context.Context, *PagingRbacUserRequest) (*PagingRbacUserResponse, error)
	// 保存角色
	SavePermRole(context.Context, *SaveRbacRoleRequest) (*SaveRbacRoleResponse, error)
	// 保存角色
	UpdateRoleResource(context.Context, *UpdateRoleResRequest) (*Result, error)
	// 获取角色
	GetRole(context.Context, *RbacRoleId) (*SRbacRole, error)
	// 获取角色列表
	QueryPermRoleList(context.Context, *QueryRbacRoleRequest) (*QueryRbacRoleResponse, error)
	// 删除角色
	DeletePermRole(context.Context, *RbacRoleId) (*Result, error)
	// 获取角色分页数据
	PagingPermRole(context.Context, *RbacRolePagingRequest) (*PagingRbacRoleResponse, error)
	// 保存PermRes
	SaveRbacResource(context.Context, *SaveRbacResRequest) (*SaveRbacResResponse, error)
	// 获取PermRes
	GetRbacRes(context.Context, *PermResId) (*SRbacRes, error)
	// 删除PermRes
	DeleteRbacResource(context.Context, *PermResId) (*Result, error)
	// 获取用户登录日志分页数据
	PagingLoginLog(context.Context, *LoginLogPagingRequest) (*LoginLogPagingResponse, error)
	mustEmbedUnimplementedRbacServiceServer()
}

// UnimplementedRbacServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRbacServiceServer struct {
}

func (UnimplementedRbacServiceServer) UserLogin(context.Context, *RbacLoginRequest) (*RbacLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedRbacServiceServer) CheckRBACToken(context.Context, *RbacCheckTokenRequest) (*RbacCheckTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRBACToken not implemented")
}
func (UnimplementedRbacServiceServer) GetJwtToken(context.Context, *Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJwtToken not implemented")
}
func (UnimplementedRbacServiceServer) GetUserResource(context.Context, *RbacUserResourceRequest) (*RbacUserResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserResource not implemented")
}
func (UnimplementedRbacServiceServer) QueryRbacResourceList(context.Context, *QueryRbacResRequest) (*QueryRbacResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRbacResourceList not implemented")
}
func (UnimplementedRbacServiceServer) MoveResourceOrdinal(context.Context, *MoveResourceOrdinalRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveResourceOrdinal not implemented")
}
func (UnimplementedRbacServiceServer) DepartTree(context.Context, *Empty) (*SRbacTree, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepartTree not implemented")
}
func (UnimplementedRbacServiceServer) SaveDepart(context.Context, *SaveDepartRequest) (*SaveDepartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDepart not implemented")
}
func (UnimplementedRbacServiceServer) GetDepart(context.Context, *RbacDepartId) (*SPermDept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepart not implemented")
}
func (UnimplementedRbacServiceServer) DeleteDepart(context.Context, *RbacDepartId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepart not implemented")
}
func (UnimplementedRbacServiceServer) SaveJob(context.Context, *SaveJobRequest) (*SaveJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveJob not implemented")
}
func (UnimplementedRbacServiceServer) GetJob(context.Context, *RbacJobId) (*SRbacJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedRbacServiceServer) QueryJobList(context.Context, *QueryJobRequest) (*QueryJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJobList not implemented")
}
func (UnimplementedRbacServiceServer) DeleteJob(context.Context, *RbacJobId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedRbacServiceServer) PagingJobList(context.Context, *RbacJobPagingRequest) (*PagingRbacJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingJobList not implemented")
}
func (UnimplementedRbacServiceServer) SaveUser(context.Context, *SaveRbacUserRequest) (*SaveRbacUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUser not implemented")
}
func (UnimplementedRbacServiceServer) GetUser(context.Context, *RbacUserId) (*SRbacUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedRbacServiceServer) DeleteUser(context.Context, *RbacUserId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedRbacServiceServer) PagingUser(context.Context, *PagingRbacUserRequest) (*PagingRbacUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingUser not implemented")
}
func (UnimplementedRbacServiceServer) SavePermRole(context.Context, *SaveRbacRoleRequest) (*SaveRbacRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePermRole not implemented")
}
func (UnimplementedRbacServiceServer) UpdateRoleResource(context.Context, *UpdateRoleResRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleResource not implemented")
}
func (UnimplementedRbacServiceServer) GetRole(context.Context, *RbacRoleId) (*SRbacRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedRbacServiceServer) QueryPermRoleList(context.Context, *QueryRbacRoleRequest) (*QueryRbacRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPermRoleList not implemented")
}
func (UnimplementedRbacServiceServer) DeletePermRole(context.Context, *RbacRoleId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermRole not implemented")
}
func (UnimplementedRbacServiceServer) PagingPermRole(context.Context, *RbacRolePagingRequest) (*PagingRbacRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingPermRole not implemented")
}
func (UnimplementedRbacServiceServer) SaveRbacResource(context.Context, *SaveRbacResRequest) (*SaveRbacResResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRbacResource not implemented")
}
func (UnimplementedRbacServiceServer) GetRbacRes(context.Context, *PermResId) (*SRbacRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRbacRes not implemented")
}
func (UnimplementedRbacServiceServer) DeleteRbacResource(context.Context, *PermResId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRbacResource not implemented")
}
func (UnimplementedRbacServiceServer) PagingLoginLog(context.Context, *LoginLogPagingRequest) (*LoginLogPagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingLoginLog not implemented")
}
func (UnimplementedRbacServiceServer) mustEmbedUnimplementedRbacServiceServer() {}

// UnsafeRbacServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RbacServiceServer will
// result in compilation errors.
type UnsafeRbacServiceServer interface {
	mustEmbedUnimplementedRbacServiceServer()
}

func RegisterRbacServiceServer(s grpc.ServiceRegistrar, srv RbacServiceServer) {
	s.RegisterService(&RbacService_ServiceDesc, srv)
}

func _RbacService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RbacLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).UserLogin(ctx, req.(*RbacLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_CheckRBACToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RbacCheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).CheckRBACToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/CheckRBACToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).CheckRBACToken(ctx, req.(*RbacCheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetJwtToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetJwtToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/GetJwtToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetJwtToken(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetUserResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RbacUserResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetUserResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/GetUserResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetUserResource(ctx, req.(*RbacUserResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_QueryRbacResourceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRbacResRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).QueryRbacResourceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/QueryRbacResourceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).QueryRbacResourceList(ctx, req.(*QueryRbacResRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_MoveResourceOrdinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveResourceOrdinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).MoveResourceOrdinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/MoveResourceOrdinal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).MoveResourceOrdinal(ctx, req.(*MoveResourceOrdinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_DepartTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).DepartTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/DepartTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).DepartTree(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_SaveDepart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDepartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).SaveDepart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/SaveDepart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).SaveDepart(ctx, req.(*SaveDepartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetDepart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RbacDepartId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetDepart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/GetDepart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetDepart(ctx, req.(*RbacDepartId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_DeleteDepart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RbacDepartId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).DeleteDepart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/DeleteDepart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).DeleteDepart(ctx, req.(*RbacDepartId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_SaveJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).SaveJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/SaveJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).SaveJob(ctx, req.(*SaveJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RbacJobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetJob(ctx, req.(*RbacJobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_QueryJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).QueryJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/QueryJobList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).QueryJobList(ctx, req.(*QueryJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RbacJobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).DeleteJob(ctx, req.(*RbacJobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_PagingJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RbacJobPagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).PagingJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/PagingJobList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).PagingJobList(ctx, req.(*RbacJobPagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_SaveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRbacUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).SaveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/SaveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).SaveUser(ctx, req.(*SaveRbacUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RbacUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetUser(ctx, req.(*RbacUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RbacUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).DeleteUser(ctx, req.(*RbacUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_PagingUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagingRbacUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).PagingUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/PagingUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).PagingUser(ctx, req.(*PagingRbacUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_SavePermRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRbacRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).SavePermRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/SavePermRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).SavePermRole(ctx, req.(*SaveRbacRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_UpdateRoleResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleResRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).UpdateRoleResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/UpdateRoleResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).UpdateRoleResource(ctx, req.(*UpdateRoleResRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RbacRoleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetRole(ctx, req.(*RbacRoleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_QueryPermRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRbacRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).QueryPermRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/QueryPermRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).QueryPermRoleList(ctx, req.(*QueryRbacRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_DeletePermRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RbacRoleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).DeletePermRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/DeletePermRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).DeletePermRole(ctx, req.(*RbacRoleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_PagingPermRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RbacRolePagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).PagingPermRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/PagingPermRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).PagingPermRole(ctx, req.(*RbacRolePagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_SaveRbacResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRbacResRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).SaveRbacResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/SaveRbacResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).SaveRbacResource(ctx, req.(*SaveRbacResRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetRbacRes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermResId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetRbacRes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/GetRbacRes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetRbacRes(ctx, req.(*PermResId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_DeleteRbacResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermResId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).DeleteRbacResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/DeleteRbacResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).DeleteRbacResource(ctx, req.(*PermResId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_PagingLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginLogPagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).PagingLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RbacService/PagingLoginLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).PagingLoginLog(ctx, req.(*LoginLogPagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RbacService_ServiceDesc is the grpc.ServiceDesc for RbacService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RbacService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RbacService",
	HandlerType: (*RbacServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _RbacService_UserLogin_Handler,
		},
		{
			MethodName: "CheckRBACToken",
			Handler:    _RbacService_CheckRBACToken_Handler,
		},
		{
			MethodName: "GetJwtToken",
			Handler:    _RbacService_GetJwtToken_Handler,
		},
		{
			MethodName: "GetUserResource",
			Handler:    _RbacService_GetUserResource_Handler,
		},
		{
			MethodName: "QueryRbacResourceList",
			Handler:    _RbacService_QueryRbacResourceList_Handler,
		},
		{
			MethodName: "MoveResourceOrdinal",
			Handler:    _RbacService_MoveResourceOrdinal_Handler,
		},
		{
			MethodName: "DepartTree",
			Handler:    _RbacService_DepartTree_Handler,
		},
		{
			MethodName: "SaveDepart",
			Handler:    _RbacService_SaveDepart_Handler,
		},
		{
			MethodName: "GetDepart",
			Handler:    _RbacService_GetDepart_Handler,
		},
		{
			MethodName: "DeleteDepart",
			Handler:    _RbacService_DeleteDepart_Handler,
		},
		{
			MethodName: "SaveJob",
			Handler:    _RbacService_SaveJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _RbacService_GetJob_Handler,
		},
		{
			MethodName: "QueryJobList",
			Handler:    _RbacService_QueryJobList_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _RbacService_DeleteJob_Handler,
		},
		{
			MethodName: "PagingJobList",
			Handler:    _RbacService_PagingJobList_Handler,
		},
		{
			MethodName: "SaveUser",
			Handler:    _RbacService_SaveUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _RbacService_GetUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _RbacService_DeleteUser_Handler,
		},
		{
			MethodName: "PagingUser",
			Handler:    _RbacService_PagingUser_Handler,
		},
		{
			MethodName: "SavePermRole",
			Handler:    _RbacService_SavePermRole_Handler,
		},
		{
			MethodName: "UpdateRoleResource",
			Handler:    _RbacService_UpdateRoleResource_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _RbacService_GetRole_Handler,
		},
		{
			MethodName: "QueryPermRoleList",
			Handler:    _RbacService_QueryPermRoleList_Handler,
		},
		{
			MethodName: "DeletePermRole",
			Handler:    _RbacService_DeletePermRole_Handler,
		},
		{
			MethodName: "PagingPermRole",
			Handler:    _RbacService_PagingPermRole_Handler,
		},
		{
			MethodName: "SaveRbacResource",
			Handler:    _RbacService_SaveRbacResource_Handler,
		},
		{
			MethodName: "GetRbacRes",
			Handler:    _RbacService_GetRbacRes_Handler,
		},
		{
			MethodName: "DeleteRbacResource",
			Handler:    _RbacService_DeleteRbacResource_Handler,
		},
		{
			MethodName: "PagingLoginLog",
			Handler:    _RbacService_PagingLoginLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rbac_service.proto",
}
